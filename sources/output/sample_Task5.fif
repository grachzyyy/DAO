// automatically generated from `@stdlib/std/stdlib.fc` `/Users/a1111/Documents/tact/nft-randomswap/sources/output/sample_Task5.fc` 
PROGRAM{
  DECLPROC __tact_not_null
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC __tact_prepare_random
  DECLPROC __tact_dict_get_int_slice
  DECLPROC __tact_dict_set_int_slice
  DECLPROC $DeployOk$_store
  DECLPROC $DeployOk$_store_cell
  DECLPROC $AdminWithdrawalAllNFTs$_store
  DECLPROC $AdminWithdrawalAllNFTs$_store_cell
  DECLPROC $AdminFetchProfit$_store
  DECLPROC $AdminFetchProfit$_store_cell
  DECLPROC $Transfer$_store
  DECLPROC $Transfer$_store_cell
  DECLPROC $Task5$_store
  DECLPROC $Task5$_load
  DECLPROC $Context$_get_value
  DECLPROC $Task5$init$_load
  DECLPROC $Task5$_contract_init
  DECLPROC $Task5$_contract_load
  DECLPROC $Task5$_contract_store
  DECLPROC $global_randomInt
  DECLPROC $Task5$_fun_profit
  DECLPROC $Task5$_fun_nfts
  DECLPROC $MessageParameters$_constructor_bounce_to_value_mode_body
  DECLPROC $Task5$_fun_notify
  DECLPROC $SendParameters$_constructor_to_value_mode_body
  DECLPROC $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload
  DECLPROC $AdminFetchProfit$_constructor_queryId
  DECLPROC $AdminWithdrawalAllNFTs$_constructor_queryId
  DECLPROC $DeployOk$_constructor_queryId
  79823 DECLMETHOD %profit
  88106 DECLMETHOD %nfts
  DECLPROC recv_internal
  65535 DECLMETHOD __tact_selector_hack
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_not_null PROCINLINE:<{
    DUP
    ISNULL
    128 THROWIF
  }>
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  __tact_prepare_random PROCINLINE:<{
    __tact_randomized GETGLOB
    ISNULL
    IF:<{
      LTIME
      ADDRAND
      TRUE
      __tact_randomized SETGLOB
    }>
  }>
  __tact_dict_get_int_slice PROCINLINE:<{
    -ROT
    DICTIGET
    NULLSWAPIFNOT
    IF:<{
    }>ELSE<{
      DROP
      PUSHNULL
    }>
  }>
  __tact_dict_set_int_slice PROCINLINE:<{
    DUP
    ISNULL
    IF:<{
      DROP
      -ROT
      DICTIDEL
      DROP
    }>ELSE<{
      s1 s3 s3 XCHG3
      DICTISET
    }>
  }>
  $DeployOk$_store PROCINLINE:<{
    2952335191 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $DeployOk$_store_cell PROCINLINE:<{
    SWAP
    $DeployOk$_store INLINECALLDICT
    ENDC
  }>
  $AdminWithdrawalAllNFTs$_store PROCINLINE:<{
    1664696863 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $AdminWithdrawalAllNFTs$_store_cell PROCINLINE:<{
    SWAP
    $AdminWithdrawalAllNFTs$_store INLINECALLDICT
    ENDC
  }>
  $AdminFetchProfit$_store PROCINLINE:<{
    4255419257 PUSHINT
    ROT
    32 STU
    64 STU
  }>
  $AdminFetchProfit$_store_cell PROCINLINE:<{
    SWAP
    $AdminFetchProfit$_store INLINECALLDICT
    ENDC
  }>
  $Transfer$_store PROCINLINE:<{
    3159574620 PUSHINT
    s0 s7 XCHG2
    32 STU
    s1 s5 XCHG
    64 STU
    s1 s3 XCHG
    STSLICE
    STSLICE
    STOPTREF
    SWAP
    STVARUINT16
    STSLICE
  }>
  $Transfer$_store_cell PROCINLINE:<{
    6 -ROLL
    $Transfer$_store INLINECALLDICT
    ENDC
  }>
  $Task5$_store PROCINLINE:<{
    s3 s4 XCHG2
    257 PUSHINT
    STIX
    STSLICE
    STDICT
    257 PUSHINT
    STIX
  }>
  $Task5$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    LDDICT
    257 PUSHINT
    LDIX
    4 -ROLL
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $Task5$init$_load PROCINLINE:<{
    257 PUSHINT
    LDIX
    LDMSGADDR
    -ROT
  }>
  $Task5$_contract_init PROCINLINE:<{
    0 PUSHINT
    PUSHNULL
    SWAP
  }>
  $Task5$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    1 LDI
    SWAP
    IF:<{
      $Task5$_load INLINECALLDICT
      1 4 BLKDROP2
    }>ELSE<{
      $Task5$init$_load INLINECALLDICT
      s0 s2 XCHG
      ENDS
      SWAP
      $Task5$_contract_init INLINECALLDICT
    }>
  }>
  $Task5$_contract_store PROCINLINE:<{
    NEWC
    TRUE
    SWAP
    1 STI
    4 -ROLL
    $Task5$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $global_randomInt PROCINLINE:<{
    __tact_prepare_random INLINECALLDICT
        RANDU256
  }>
  $Task5$_fun_profit PROCREF:<{
        BALANCE FIRST
    100000000 PUSHINT
    SUB
  }>
  $Task5$_fun_nfts PROCREF:<{
    SWAP
    257 PUSHINT
    s2 PUSH
    PUSHNULL
    __tact_dict_set_int_slice INLINECALLDICT
    TUCK
  }>
  $MessageParameters$_constructor_bounce_to_value_mode_body PROCINLINE:<{
    s3 s3 XCHG2
    s0 s4 XCHG
  }>
  $Task5$_fun_notify PROCINLINE:<{
    __tact_context_get_sender INLINECALLDICT
    FALSE
    0 PUSHINT
    s0 s3 XCHG2
    66 PUSHINT
    SWAP
    $MessageParameters$_constructor_bounce_to_value_mode_body INLINECALLDICT
        NEWC
        b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
        1 STI               // store `bounce`
        b{000} STSLICECONST // store bounced = false and src = addr_none
        STSLICE             // store `to`
        SWAP
        STGRAMS             // store `value`
        106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
        STZEROES
        // → Stack state
        // s0: Builder
        // s1: `body`
        // s2: `mode`
        STDICT
        ENDC
        SWAP
        SENDRAWMSG
  }>
  $SendParameters$_constructor_to_value_mode_body PROCINLINE:<{
    2SWAP
    PUSHNULL
    PUSHNULL
    s0 s0 s3 XCHG3
    TRUE
  }>
  $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload PROCINLINE:<{
  }>
  $AdminFetchProfit$_constructor_queryId PROCINLINE:<{
  }>
  $AdminWithdrawalAllNFTs$_constructor_queryId PROCINLINE:<{
  }>
  $DeployOk$_constructor_queryId PROCINLINE:<{
  }>
  %profit PROC:<{
    $Task5$_contract_load INLINECALLDICT
    $Task5$_fun_profit INLINECALLDICT
    4 1 BLKDROP2
  }>
  %nfts PROC:<{
    $Task5$_contract_load INLINECALLDICT
    $Task5$_fun_nfts INLINECALLDICT
    4 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $Task5$_contract_load INLINECALLDICT
    s0 s5 XCHG
    IFJMP:<{
      5 BLKDROP
    }>
    s0 s3 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    504446819 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      LDMSGADDR
      DROP
      s0 s2 PUSH2
      SDEQ
      IFJMP:<{
        2DROP
        257 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s5 PUSH
        s3 s5 XCHG
        SWAP
        __tact_dict_set_int_slice INLINECALLDICT
        s0 s3 XCHG
        INC
        s1 s3 XCHG
        $Task5$_contract_store INLINECALLDICT
      }>
      __tact_context_get_sender INLINECALLDICT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      2100000000 PUSHINT
      LESS
      IFJMP:<{
        0 PUSHINT
        64 PUSHINT
        PUSHNULL
        s2 PUSH
            b{} PUSHSLICE
        s6 PUSH
        s5 s8 XCHG
        s0 s4 XCHG
        s0 s7 XCHG
        3 -ROLL
        $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload INLINECALLDICT
        NEWC
        $Transfer$_store_cell INLINECALLDICT
        s3 s3 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        s0 s0 s3 XCHG3
        $Task5$_contract_store INLINECALLDICT
      }>
      $global_randomInt INLINECALLDICT
      s7 PUSH
      INC
      MOD
      s0 s7 PUSH2
      NEQ
      IF:<{
        NIP
        s5 PUSH
        257 PUSHINT
        s2 PUSH
        __tact_dict_get_int_slice INLINECALLDICT
        __tact_not_null INLINECALLDICT
        257 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s3 s8 XCHG
        s1 s8 s0 XCHG3
        __tact_dict_set_int_slice INLINECALLDICT
        s0 s5 XCHG
      }>ELSE<{
        DROP
      }>
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      2000000000 PUSHINT
      SUB
      0 PUSHINT
      PUSHNULL
      OVER
          b{} PUSHSLICE
      s6 PUSH
      s5 s8 XCHG
      s0 s4 XCHG
      s0 s7 XCHG
      3 -ROLL
      $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload INLINECALLDICT
      NEWC
      $Transfer$_store_cell INLINECALLDICT
      s3 s3 s0 XCHG3
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s0 s3 XCHG3
      $Task5$_contract_store INLINECALLDICT
    }>
    OVER
    2957643261 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      DROP
      30338 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s3 PUSH
      SDEQ
      THROWANYIFNOT
      100000000 PUSHINT
      0 PUSHINT
          RAWRESERVE
      0 PUSHINT
      7 PUSHPOW2
      s0 s2 XCHG
      $AdminFetchProfit$_constructor_queryId INLINECALLDICT
      NEWC
      $AdminFetchProfit$_store_cell INLINECALLDICT
      s3 PUSH
      s3 s3 XCHG2
      $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      s0 s0 s3 XCHG3
      $Task5$_contract_store INLINECALLDICT
    }>
    OVER
    1664696863 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      64 LDU
      DROP
      __tact_context_get_sender INLINECALLDICT
          MYADDR
      SDEQ
      NOT
      IF:<{
        41207 PUSHINT
        __tact_context_get_sender INLINECALLDICT
        s3 PUSH
        SDEQ
        THROWANYIFNOT
        28623 PUSHINT
        __tact_context_get INLINECALLDICT
        $Context$_get_value INLINECALLDICT
        1000000000 PUSHINT
        80000000 PUSHINT
        s8 PUSH
        MUL
        ADD
        GEQ
        THROWANYIFNOT
      }>
          ACCEPT
      PUSHNULL
      0 PUSHINT
          b{} PUSHSLICE
      s3 PUSH
      s3 s5 XCPU
      s3 s6 XCPU
      s0 s3 XCHG
      $Transfer$_constructor_queryId_newOwner_responseDestination_customPayload_forwardAmount_forwardPayload INLINECALLDICT
      NEWC
      $Transfer$_store_cell INLINECALLDICT
      100 PUSHINT
      s6 PUSH
          MIN
      REPEAT:<{
        s0 s5 XCHG
        DEC
        s4 PUSH
        257 PUSHINT
        s2 PUSH
        __tact_dict_get_int_slice INLINECALLDICT
        __tact_not_null INLINECALLDICT
        20000000 PUSHINT
        0 PUSHINT
        s8 PUSH
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
        s0 s5 XCHG
      }>
      DROP
      s4 PUSH
      0 GTINT
      IF:<{
            MYADDR
        0 PUSHINT
        7 PUSHPOW2
        s0 s3 XCHG
        $AdminWithdrawalAllNFTs$_constructor_queryId INLINECALLDICT
        NEWC
        $AdminWithdrawalAllNFTs$_store_cell INLINECALLDICT
        s1 s3 s0 XCHG3
        $SendParameters$_constructor_to_value_mode_body INLINECALLDICT
            NEWC
            b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
            1 STI               // store `bounce`
            b{000} STSLICECONST // store bounced = false and src = addr_none
            STSLICE             // store `to`
            SWAP
            STGRAMS             // store `value`
            105 PUSHINT         // 1 + 4 + 4 + 64 + 32
            STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
            // → Stack state
            // s0: Builder
            // s1: `data`
            // s2: `code`
            // s3: `body`
            // s4: `mode`
            // Group 2: Placing the Builder after code and data, then checking those for nullability
            s2 XCHG0
            DUP2
            ISNULL
            SWAP
            ISNULL
            AND
            // → Stack state
            // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
            // s1: `code`
            // s2: `data`
            // s3: Builder
            // s4: `body`
            // s5: `mode`
            // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
            <{
                DROP2 // drop `data` and `code`, since either of those is null
                b{0} STSLICECONST
            }> PUSHCONT
            // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
            <{
                // _ split_depth:(Maybe (## 5))
                //   special:(Maybe TickTock)
                //   code:(Maybe ^Cell)
                //   data:(Maybe ^Cell)
                //   library:(Maybe ^Cell)
                // = StateInit;
                ROT                // place message Builder on top
                b{10} STSLICECONST // store Maybe = true, Either = false
                // Start composing inlined StateInit
                b{00} STSLICECONST // store split_depth and special first
                STDICT             // store code
                STDICT             // store data
                b{0} STSLICECONST  // store library
            }> PUSHCONT
            // Group 3: IFELSE that does the branching shown above
            IFELSE
            // → Stack state
            // s0: Builder
            // s1: null or StateInit
            // s2: `body`
            // s3: `mode`
            // Group 4: Finalizing the message
            STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
            ENDC
            // → Stack state
            // s0: Cell
            // s1: `mode`
            // Group 5: Sending the message, with `mode` on top
            SWAP
            SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      }>ELSE<{
        DROP
        PUSHNULL
        s3 POP
      }>
      s0 s0 s3 XCHG3
      $Task5$_contract_store INLINECALLDICT
    }>
    SWAP
    2490013878 PUSHINT
    EQUAL
    IFJMP:<{
      64 LDU
      DROP
      $DeployOk$_constructor_queryId INLINECALLDICT
      NEWC
      $DeployOk$_store_cell INLINECALLDICT
      s4 s3 s0 XCHG3
      s1 s2 XCHG
      $Task5$_fun_notify INLINECALLDICT
      $Task5$_contract_store INLINECALLDICT
    }>
    5 BLKDROP
    130 THROW
  }>
  __tact_selector_hack PROC:<{
    @atend @ 1 {
            execute current@ context@ current!
            {
                // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
                // We want to extract recv_internal/recv_external from the dict and select needed function
                // not by jumping to the needed function by it's index, but by using usual IF statements.
                }END> b> // Close previous builder, now we have a cell of previous code on top of the stack
                <{ // Start of the new code builder
                    SETCP0
                    // Swap the new code builder with the previous code, now we have previous code on top of the stack
                    swap
                    // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                    <s ref@
                    // Extract the recv_internal from the dict
                    dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                    swap
                    // Delete the recv_internal from the dict
                    0 swap @procdictkeylen idict- drop
                    // Delete the recv_external from the dict (it's okay if it's not there)
                    -1 swap @procdictkeylen idict- drop
                    // Delete the __tact_selector_hack from the dict
                    65535 swap @procdictkeylen idict- drop
                    // Bring the code builder from the bottom of the stack
                    // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                    depth 1- roll
                    // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                    swap
                    // Check if the dict is empty
                    dup null?
                    // Store a copy of this flag in the bottom of the stack
                    dup depth 1- -roll
                    {
                        // If the dict is empty, just drop it (it will be null if it's empty)
                        drop
                    }
                    {
                        // If the dict is not empty, prepare continuation to be stored in c3
                        <{
                            // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                            swap @procdictkeylen DICTPUSHCONST
                            // Jump to the needed function by it's index
                            DICTIGETJMPZ
                            // If such key is not found, throw 11 along with the key as an argument
                            11 THROWARG
                        }> PUSHCONT
                        // Store the continuation in c3
                        c3 POP
                    } cond
                    // Function id is on top of the (runtime) stack
                    DUP IFNOTJMP:<{
                        // place recv_internal here
                        DROP swap @addop
                    }>
                    // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                    depth 1- roll
                    {
                        // If the dict is empty, throw 11
                        11 THROWARG
                    }
                    {
                        // If the dict is not empty, jump to continuation from c3
                        c3 PUSH JMPX
                    } cond
                }> b>
            } : }END>c
            current@ context! current!
        } does @atend !
  }>
}END>c
