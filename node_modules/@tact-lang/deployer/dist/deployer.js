"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareTactDeployment = void 0;
const form_data_1 = __importDefault(require("form-data"));
const axios_1 = __importDefault(require("axios"));
const z = __importStar(require("zod"));
const configScheme = z.object({
    backends: z.array(z.string()),
    backendsTestnet: z.array(z.string()),
});
const configUrl = "https://raw.githubusercontent.com/ton-community/contract-verifier-config/main/config.json";
function randomFromArray(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
async function fetchBackend(testnet) {
    let parsed = configScheme.parse(await axios_1.default.get(configUrl).then((_res) => _res.data));
    return randomFromArray(testnet ? parsed.backendsTestnet : parsed.backends);
}
// Returns a URL for deployment
async function prepareTactDeployment(args) {
    // Fetch backend
    const backend = await fetchBackend(args.testnet);
    // Upload files
    const form = new form_data_1.default();
    form.append("file", args.pkg, {
        knownLength: args.pkg.length,
        filename: "source.pkg",
    });
    form.append("file2", args.data, {
        knownLength: args.data.length,
        filename: "data.boc",
    });
    const res = await axios_1.default.post(`${backend}/prepareTactDeployment`, form, {
        headers: form.getHeaders(),
    });
    if (typeof res.data !== "string") {
        throw new Error(`Unexpected response from backend: ${res.data}`);
    }
    return res.data;
}
exports.prepareTactDeployment = prepareTactDeployment;
//# sourceMappingURL=deployer.js.map