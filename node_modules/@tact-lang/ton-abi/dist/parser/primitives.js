"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrimitiveSerializer = void 0;
//
// Integer
//
const intSerializer = {
    tsType: `number`,
    load: (src, d) => d.signed ? src.loadInt(d.size) : src.loadUint(d.size),
    store: (builder, d, v) => d.signed ? builder.storeInt(v, d.size) : builder.storeUint(v, d.size),
    match: (src) => {
        if (src.kind === 'simple') {
            if (src.type === 'int' || src.type === 'uint') {
                let signed = src.type === 'int';
                let size = undefined;
                if (typeof src.format === 'number') {
                    size = src.format;
                }
                else if (src.format === null || src.format === undefined) {
                    size = 257;
                }
                if (size !== undefined && size >= 1 && size <= 32 && !src.optional) {
                    return { size, signed };
                }
            }
        }
        return null;
    }
};
const intOptSerializer = {
    tsType: `number | null`,
    load: (src, d) => d.signed ? src.loadMaybeInt(d.size) : src.loadMaybeUint(d.size),
    store: (builder, d, v) => d.signed ? builder.storeMaybeInt(v, d.size) : builder.storeMaybeUint(v, d.size),
    match: (src) => {
        if (src.kind === 'simple') {
            if (src.type === 'int' || src.type === 'uint') {
                let signed = src.type === 'int';
                let size = undefined;
                if (typeof src.format === 'number') {
                    size = src.format;
                }
                else if (src.format === null || src.format === undefined) {
                    size = 257;
                }
                if (size !== undefined && size >= 1 && size <= 32 && !!src.optional) {
                    return { size, signed };
                }
            }
        }
        return null;
    }
};
//
// Big Integer
//
const bigintSerializer = {
    tsType: `bigint`,
    load: (src, d) => d.signed ? src.loadIntBig(d.size) : src.loadUintBig(d.size),
    store: (builder, d, v) => d.signed ? builder.storeInt(v, d.size) : builder.storeUint(v, d.size),
    match: (src) => {
        if (src.kind === 'simple') {
            if (src.type === 'int' || src.type === 'uint') {
                let signed = src.type === 'int';
                let size = undefined;
                if (typeof src.format === 'number') {
                    size = src.format;
                }
                else if (src.format === null || src.format === undefined) {
                    size = 257;
                }
                if (size !== undefined && !src.optional) {
                    return { size, signed };
                }
            }
        }
        return null;
    }
};
const bigintOptSerializer = {
    tsType: `bigint | null`,
    load: (src, d) => d.signed ? src.loadMaybeIntBig(d.size) : src.loadMaybeUintBig(d.size),
    store: (builder, d, v) => d.signed ? builder.storeMaybeInt(v, d.size) : builder.storeMaybeUint(v, d.size),
    match: (src) => {
        if (src.kind === 'simple') {
            if (src.type === 'int' || src.type === 'uint') {
                let signed = src.type === 'int';
                let size = undefined;
                if (typeof src.format === 'number') {
                    size = src.format;
                }
                else if (src.format === null || src.format === undefined) {
                    size = 257;
                }
                if (size !== undefined && !!src.optional) {
                    return { size, signed };
                }
            }
        }
        return null;
    }
};
//
// Coins
//
const coinsSerializer = {
    tsType: `bigint`,
    load: (src, d) => src.loadCoins(),
    store: (builder, d, v) => builder.storeCoins(v),
    match: (src) => {
        if (src.kind === 'simple') {
            if (src.type === 'int' || src.type === 'uint') {
                let signed = src.type === 'int';
                let size = undefined;
                if (src.format === 'coins') {
                    return {};
                }
            }
        }
        return null;
    }
};
const coinsOptSerializer = {
    tsType: `bigint`,
    load: (src, d) => src.loadMaybeCoins(),
    store: (builder, d, v) => builder.storeMaybeCoins(v),
    match: (src) => {
        if (src.kind === 'simple' && src.type === 'uint' && src.format === 'coins') {
            return {};
        }
        return null;
    }
};
//
// Bool
//
const booleanSerializer = {
    tsType: `boolean`,
    load: (src, d) => src.loadBoolean(),
    store: (builder, d, v) => builder.storeBit(v),
    match: (src) => {
        if (src.kind === 'simple' && src.type === 'bool' && !src.optional) {
            return {};
        }
        return null;
    }
};
const booleanOptSerializer = {
    tsType: `boolean | null`,
    load: (src, d) => src.loadMaybeBoolean(),
    store: (builder, d, v) => (v !== null) ? builder.storeBit(true).storeBit(v) : builder.storeBit(false),
    match: (src) => {
        if (src.kind === 'simple' && src.type === 'bool' && !!src.optional) {
            return {};
        }
        return null;
    }
};
//
// Address
//
const addressSerializer = {
    tsType: `Address`,
    load: (src, d) => src.loadAddress(),
    store: (builder, d, v) => builder.storeAddress(v),
    match: (src) => {
        if (src.kind === 'simple' && src.type === 'address' && !src.optional) {
            return {};
        }
        return null;
    }
};
const addressOptSerializer = {
    tsType: `Address| null`,
    load: (src, d) => src.loadMaybeAddress(),
    store: (builder, d, v) => builder.storeAddress(v),
    match: (src) => {
        if (src.kind === 'simple' && src.type === 'address' && !!src.optional) {
            return {};
        }
        return null;
    }
};
//
// Resolver
//
const serializers = [
    intSerializer,
    intOptSerializer,
    bigintSerializer,
    bigintOptSerializer,
    coinsSerializer,
    coinsOptSerializer,
    addressSerializer,
    addressOptSerializer,
    booleanSerializer,
    booleanOptSerializer
];
function getPrimitiveSerializer(type) {
    for (let s of serializers) {
        let matched = s.match(type);
        if (matched !== null) {
            return { serializer: s, type: matched };
        }
    }
    return null;
}
exports.getPrimitiveSerializer = getPrimitiveSerializer;
