/// <reference types="node" />
/// <reference types="node" />
import { SouffleContext, SouffleFact } from "..";
import { Transform, TransformCallback } from "stream";
/**
 * Raw strings parsed from the Soufflé CSV-like output in the following format:
 * rule_name |-> [relation_name, fact_name]
 */
export type SouffleOutputRaw = string[][];
/**
 * Custom Transform Stream to parse space-separated values.
 */
export declare class SpaceSeparatedParser extends Transform {
    constructor(options?: {});
    _transform(chunk: Buffer | string, _: BufferEncoding, callback: TransformCallback): void;
}
/**
 * Parses CSV-like Soufflé output.
 */
export declare function parseSpaceSeparatedValues(input: string): SouffleOutputRaw;
/**
 * Structured Soufflé output that contains information about facts with additional
 * annotations added to the executed `Context`.
 */
export declare class SouffleOutputStructured<FactData> {
    entries: Map<string, SouffleFact<FactData>[]>;
    private constructor();
    /**
     * Generates a structured Soufflé output from raw CSV-like strings.
     * @returns `undefined` if cannot unmarshal output.
     */
    static fromRaw<FactData>(ctx: SouffleContext<FactData>, rawOut: Map<string, SouffleOutputRaw>): SouffleOutputStructured<FactData> | undefined;
}
/**
 * Asynchronously parses a file into a `RawSouffleOutput`.
 * @param filePath Path to the file to parse.
 * @returns `RawSouffleOutput` containing the parsed data.
 */
export declare function parseResults(filePath: string): Promise<SouffleOutputRaw>;
/**
 * Synchronously parses a file into a `SouffleExecutionResult`.
 * @param filePath Path to the file to parse.
 * @returns `RawSouffleOutput` containing the parsed data.
 */
export declare function parseResultsSync(filePath: string): SouffleOutputRaw;
