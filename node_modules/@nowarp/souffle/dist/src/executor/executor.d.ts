import { SouffleContext } from "..";
import { SouffleOutputRaw, SouffleOutputStructured } from "./results";
export interface SouffleExecutorParams {
    /** Path to the Soufflé binary. */
    soufflePath?: string;
    /** Temporary directory to store input facts for Soufflé. */
    inputDir?: string;
    /** Temporary directory or path to CSV output from Soufflé. */
    outputDir?: string;
}
/**
 * Encapsulates results of the Soufflé execution.
 */
export type SouffleExecutionResult<FactData> = 
/**
 * The structured result which values are assigned to something meaningful with
 * respect to `FactData`.
 */
{
    kind: "structured";
    results: SouffleOutputStructured<FactData>;
}
/**
 * It was not possible to further process the raw results.
 */
 | {
    kind: "raw";
    results: Map<string, SouffleOutputRaw>;
}
/**
 * An error occurred.
 */
 | {
    kind: "error";
    stderr: string;
};
/**
 * Manages the process of executing Soufflé and parsing its output.
 */
export declare abstract class SouffleExecutor<FactData> {
    protected soufflePath: string;
    protected inputDir: string;
    protected outputDir: string;
    constructor({ soufflePath, inputDir, outputDir, }?: Partial<SouffleExecutorParams>);
    abstract execute(ctx: SouffleContext<FactData>): SouffleExecutionResult<FactData> | Promise<SouffleExecutionResult<FactData>>;
    /**
     * Produces a Soufflé command that returns output in the CSV format.
     */
    protected makeSouffleCommand(ctx: SouffleContext<FactData>): string;
}
export declare class SouffleSyncExecutor<FactData> extends SouffleExecutor<FactData> {
    /**
     * Executes the Datalog program using the Soufflé engine synchronously.
     * @returns `SouffleExecutionResult` which contains the status of execution.
     */
    execute(ctx: SouffleContext<FactData>): SouffleExecutionResult<FactData>;
}
export declare class SouffleAsyncExecutor<FactData> extends SouffleExecutor<FactData> {
    /**
     * Executes the Datalog program using the Soufflé engine.
     * @returns `SouffleExecutionResult` which contains the status of execution.
     */
    execute(ctx: SouffleContext<FactData>): Promise<SouffleExecutionResult<FactData>>;
}
