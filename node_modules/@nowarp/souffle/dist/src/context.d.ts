import { SouffleRelation, SouffleFact, SouffleFactValue, SouffleRule, SouffleComment, SouffleProgram } from "./syntax";
import { ILogger } from "./logger";
type RelationName = string;
/**
 * Program generation context that maps relations, facts, and rules, and generates
 * a valid AST, suitable for pretty-printing and further processing by `souffle`.
 *
 * `FactData` is an optional annotation of facts that holds some information about
 * their meanings. For example, it could be used to map some program entities with
 * generated Soufflé facts.
 */
export declare class SouffleContext<FactData = undefined> {
    private name;
    /**
     * Docstring-like comment introduced to the top level of the generated program.
     */
    private programComment;
    /**
     * Add generated comments to the output Soufflé program.
     * Set to `false` to reduce the size of produced code.
     */
    addComments: boolean;
    /**
     * Logger used to report library messages.
     */
    logger: ILogger;
    /**
     * Holds facts mapped to their corresponding relation declarations.
     */
    private facts;
    /**
     * Holds declarations of relations.
     */
    private relations;
    /**
     * Soufflé rules defined in the program.
     */
    private rules;
    /**
     * @param name Unique name of the generated program.
     * @param comment Docstring-like comment to be added on the top of the generated program.
     * @param addComments Include comments to the generated program.
     */
    constructor(name: string, { comment, addComments, logger, }?: Partial<{
        comment: SouffleComment | undefined;
        addComments: boolean;
        formatWithSpacing: boolean;
        logger: ILogger;
    }>);
    /** Filename of the Soufflé file to be used for the generated program. */
    get filename(): string;
    /**
     * Generates Soufflé program based on the relations, rules and facts added to the context.
     */
    generateProgram(): SouffleProgram<FactData>;
    /**
     * Finds a rule which has the given name among its heads.
     */
    findRule(name: string): SouffleRule | undefined;
    /**
     * Finds a relation defined within the program.
     */
    getRelation(name: RelationName): SouffleRelation | undefined;
    /**
     * Finds the fact defined with the given values.
     * @returns FactData if found, `undefined` otherwise.
     */
    findFact(values: SouffleFactValue[]): SouffleFact<FactData> | undefined;
    /**
     * Collects names of relations which produce output on executing.
     */
    collectOutputNames(): string[];
    /**
     * Adds new entities to the Soufflé program.
     * @throws If an entity is already defined.
     */
    add(entity: SouffleRelation | SouffleRule): void;
    /**
     * Adds a new relation to the Soufflé program.
     * @throws If a relation with the same name is already defined.
     */
    private addRelation;
    /**
     * Adds a new fact to an existing relation.
     * @param name The name of the relation to which the fact is related.
     * @param fact Fact values to add.
     * @throws Error if the relation does not exist.
     */
    addFact(name: RelationName, factValues: SouffleFactValue[], data?: FactData): void | never;
    /**
     * Adds a new rule to the Soufflé program.
     * @param rule The rule to add to the program.
     * @throws Error if any head relation is not defined.
     */
    private addRule;
}
export {};
