"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.program = exports.rule = exports.body = exports.booleanConstraint = exports.containsConstraint = exports.matchConstraint = exports.binaryConstraint = exports.atom = exports.relation = exports.fact = exports.comment = void 0;
function wrapComment(value) {
    if (value === undefined) {
        return undefined;
    }
    const isComment = typeof value === "object" && "kind" in value && value.kind === "comment";
    return isComment ? value : comment(value);
}
function comment(line, style = "//") {
    return {
        kind: "comment",
        style,
        lines: Array.isArray(line) ? line : [line],
    };
}
exports.comment = comment;
function fact(relationName, values, data) {
    return {
        kind: "fact",
        relationName,
        values,
        data,
    };
}
exports.fact = fact;
function relation(name, args, io, comment) {
    return {
        kind: "relation",
        name,
        comment: wrapComment(comment),
        args,
        io,
    };
}
exports.relation = relation;
function atom(name, args = []) {
    return { kind: "atom", name, args };
}
exports.atom = atom;
function binaryConstraint(lhs, op, rhs) {
    return {
        kind: "binary",
        lhs,
        op,
        rhs,
    };
}
exports.binaryConstraint = binaryConstraint;
function matchConstraint(lhs, rhs) {
    return {
        kind: "match",
        lhs,
        rhs,
    };
}
exports.matchConstraint = matchConstraint;
function containsConstraint(lhs, rhs) {
    return {
        kind: "contains",
        lhs,
        rhs,
    };
}
exports.containsConstraint = containsConstraint;
function booleanConstraint(value) {
    return {
        kind: "boolean",
        value,
    };
}
exports.booleanConstraint = booleanConstraint;
function body(value, { negated = false } = {}) {
    const isAtom = (value) => "name" in value;
    if (isAtom(value)) {
        return { kind: "atom", value, negated };
    }
    else {
        return { kind: "constraint", value, negated };
    }
}
exports.body = body;
function rule(heads, body, comment) {
    return {
        kind: "rule",
        heads,
        body,
        comment: wrapComment(comment),
    };
}
exports.rule = rule;
function program(name, entries, comment) {
    return {
        kind: "program",
        name,
        comment: wrapComment(comment),
        entries,
    };
}
exports.program = program;
