import { SouffleComment, SouffleFact, SouffleFactValue, SouffleRuleBody, SouffleProgramEntry, SouffleProgram, SouffleRelationIO, SouffleConstraintArg, SouffleConstraint, SouffleConstraintOp, SouffleRelation, SouffleFactType, SouffleRule, SouffleAtom } from "./syntax";
export type CommentValue = string | string[];
export declare function comment(line: string | string[], style?: "//" | "/*"): SouffleComment;
export declare function fact<D = undefined>(relationName: string, values: SouffleFactValue[], data?: D): SouffleFact<D>;
export declare function relation(name: string, args: [string, SouffleFactType][], io?: SouffleRelationIO, comment?: SouffleComment | CommentValue): SouffleRelation;
export declare function atom(name: string, args?: string[]): SouffleAtom;
export declare function binaryConstraint(lhs: SouffleConstraintArg, op: SouffleConstraintOp, rhs: SouffleConstraintArg): SouffleConstraint;
export declare function matchConstraint(lhs: SouffleConstraintArg, rhs: SouffleConstraintArg): SouffleConstraint;
export declare function containsConstraint(lhs: SouffleConstraintArg, rhs: SouffleConstraintArg): SouffleConstraint;
export declare function booleanConstraint(value: boolean): SouffleConstraint;
export declare function body(value: SouffleAtom | SouffleConstraint, { negated }?: Partial<{
    negated: boolean;
}>): SouffleRuleBody;
export declare function rule(heads: SouffleAtom[], body: SouffleRuleBody[], comment?: SouffleComment | CommentValue): SouffleRule;
export declare function program<D = undefined>(name: string, entries: SouffleProgramEntry<D>[], comment?: SouffleComment | CommentValue): SouffleProgram<D>;
