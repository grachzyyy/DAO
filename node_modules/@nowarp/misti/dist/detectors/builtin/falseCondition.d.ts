import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { AstDetector } from "../detector";
/**
 * A detector that highlights conditions that evaluate to a constant `true` or `false`
 * in `if`, `while`, or `until` statements, and zero iterations in `repeat` statements.
 *
 * ## Why is it bad?
 * Conditions that always evaluate to a constant `true` or `false` are likely the result of a typo
 * or logic error. Such conditions can lead to unintended behavior, dead code, or incorrect control flow.
 * This detector helps identify these cases so they can be corrected, improving the code's reliability.
 *
 * ## Example
 * ```tact
 * const FALSE: Bool = false;
 * // Bad: Always false because of operator precedence
 * if ((param | value) & FALSE) {
 *  // ... never executed
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * const FALSE: Bool = false;
 * // OK: Fixed after the analyzer highlighted this
 * if (param) {}
 * ```
 */
export declare class FalseCondition extends AstDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Checks if the given function contains any false conditions.
     */
    private checkFunction;
    private warnCondition;
    private constEvalToZero;
    private constEvalToFalse;
}
