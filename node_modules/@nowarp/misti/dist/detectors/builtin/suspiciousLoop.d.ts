import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { AstDetector } from "../detector";
/**
 * An optional detector that identifies potentially problematic loops, such as those
 * with unbounded conditions or excessive iteration counts.
 *
 * ## Why is it bad?
 * Loops with always-true conditions or massive iteration limits can lead to high
 * gas consumption and even denial of service (DoS) issues. By flagging these loops,
 * this detector aids auditors in catching potential performance or security risks.
 *
 * ## Example
 * ```tact
 * repeat (10_001) { // Bad: High iteration count
 *     // ...
 * }
 *
 * while (true) { // Bad: Unbounded condition
 *     // ...
 * }
 * ```
 */
export declare class SuspiciousLoop extends AstDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Analyzes a loop statement to determine if it contains a suspicious condition.
     */
    private analyzeLoopStatement;
    private checkFalseCondition;
    private checkTrueCondition;
}
