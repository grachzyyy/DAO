import { CompilationUnit } from "../../internals/ir";
import { SrcInfo } from "../../internals/tact/imports";
import { Category, Warning, Severity } from "../../internals/warnings";
import { DataflowDetector, WarningsBehavior } from "../detector";
type ConstantName = string;
/**
 * A detector that identifies write-only or unused variables, fields and constants.
 *
 * ## Why is it bad?
 * These variables are either assigned but never used in any meaningful computation,
 * or they are declared and never used at all, which may indicate redundant code
 * or an incomplete implementation of the intended logic.
 *
 * ## Example
 * ```tact
 * // Error: the developer forgot to use the constant
 * const MAX_SUPPLY: Int = 1000;
 *
 * fun mint(to: Address, amount: Int) {
 *   balances.set(to, balances.get(to)!! + amount);
 *   totalSupply += amount;
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * const MAX_SUPPLY: Int = 1000;
 *
 * fun mint(to: Address, amount: Int) {
 *   // OK: Fixed after the analyzer highlighted this warning
 *   require(totalSupply + amount <= MAX_SUPPLY, "Exceeds max supply");
 *   balances.set(to, balances.get(to)!! + amount);
 *   totalSupply += amount;
 * }
 * ```
 */
export declare class NeverAccessedVariables extends DataflowDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    get shareImportedWarnings(): WarningsBehavior;
    checkFields(cu: CompilationUnit): Warning[];
    private collectDefinedFields;
    /**
     * Executes `callback` for each trait available within the compilation unit `cu`.
     */
    private forEachTrait;
    private collectUsedFields;
    checkConstants(cu: CompilationUnit): Warning[];
    collectDefinedConstants(cu: CompilationUnit): Set<[ConstantName, SrcInfo]>;
    /**
     * Collects all the identifiers using withing all the statements.
     */
    collectUsedNames(cu: CompilationUnit): Set<ConstantName>;
    /**
     * Checks never accessed local variables in all the functions leveraging the
     * monotonic framework and the fixpoint dataflow solver.
     */
    checkVariables(cu: CompilationUnit): Warning[];
}
export {};
