"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnsurePrgSeed = void 0;
const tact_1 = require("../../internals/tact");
const imports_1 = require("../../internals/tact/imports");
const warnings_1 = require("../../internals/warnings");
const detector_1 = require("../detector");
/**
 * A detector that identifies all calls to `nativeRandom` and `nativeRandomInterval`
 * without a preceding PRG seed initialization.
 *
 * ## Why is it bad?
 * Using `nativeRandom` or `nativeRandomInterval` without first initializing the PRG seed via
 * `nativePrepareRandom`, `nativeRandomize`, or `nativeRandomizeLt` may lead to unintended behavior
 * or weak random number generation. This detector ensures that PRG seed initialization
 * is always performed before any use of random functions, enhancing contract security.
 *
 * ## Example
 * ```tact
 * // Bad: `nativeRandom` is used without prior PRG seed initialization
 * fun generateRandomValue(): Int {
 *   return nativeRandom()
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * fun test(): Int {
 *   nativePrepareRandom();
 * }
 *
 * // OK: PRG has been initialized somewhere in the contract
 * fun generateRandomValue(): Int {
 *   return nativeRandom()
 * }
 * ```
 */
class EnsurePrgSeed extends detector_1.AstDetector {
    severity = warnings_1.Severity.MEDIUM;
    category = warnings_1.Category.SECURITY;
    async check(cu) {
        const randomCalls = cu.ast.getProgramEntries().reduce((acc, node) => {
            (0, tact_1.forEachExpression)(node, (expr) => {
                if (expr.kind === "static_call") {
                    if (tact_1.PRG_INIT_FUNCTIONS.has((0, imports_1.idText)(expr.function))) {
                        acc.hasInitializer = true;
                    }
                    if (tact_1.PRG_NATIVE_USE_FUNCTIONS.has((0, imports_1.idText)(expr.function))) {
                        acc.uses.push(expr);
                    }
                }
            });
            return acc;
        }, { hasInitializer: false, uses: [] });
        if (randomCalls.uses.length === 0 || randomCalls.hasInitializer) {
            return [];
        }
        return randomCalls.uses.reduce((acc, use) => {
            acc.push(this.makeWarning(`PRG seed should be initialized before using ${(0, imports_1.idText)(use.function)}`, use.loc, {
                suggestion: `Use ${Array.from(tact_1.PRG_INIT_FUNCTIONS)
                    .map((name) => "`" + name + "`")
                    .join(", ")} to initialize the PRG seed or choose the safer \`randomInt\` function`,
            }));
            return acc;
        }, []);
    }
}
exports.EnsurePrgSeed = EnsurePrgSeed;
