import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { DataflowDetector } from "../detector";
/**
 * A detector that finds overlapping messages between general string receivers and string receivers.
 *
 * ## Why is it bad?
 * Constant string receivers and general string receivers can have overlapping messages
 * in which case the constant string receiver always takes precedence.
 *
 * ## Example
 * ```tact
 * contract Test {
 *   receive("foobar") { throw(1042) }
 *   receive(msg: String) {
 *     if (msg == "foobar") { throw(1043)  } // Bad: Dead code
 *   }
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * contract Test {
 *   receive("foobar") { throw(1042) }
 *   receive(msg: String) {}
 * }
 * ```
 */
export declare class StringReceiversOverlap extends DataflowDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Checks violations of the detector rules in the body of generic string receiver.
     * @param receiver Generic string receiver
     * @param argName Name of the argument that overlaps with one of the string receivers
     */
    private checkConditions;
    /**
     * Adds a warning to `warnings` if `condition` contains a comparison operation
     * involving the overlapping arg.
     */
    private checkCondition;
    /**
     * Returns the name of the argument if the given receiver is a generic string
     * receiver: `receive(arg: String)`.
     */
    private findGenericReceiverArg;
    private getStringReceiverNames;
}
