import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { AstDetector } from "../detector";
/**
 * An optional detector that identifies cases where a state-mutating function is called within a getter method.
 *
 * ## Why is it important?
 * While getter methods are generally expected to be pure functions that donâ€™t modify state,
 * they sometimes contain state-modifying logic (directly or indirectly). This can lead to
 * misunderstandings for developers who assume getters are read-only. This detector is intended
 * for auditors to highlight such cases as potential design concerns.
 *
 * ## Example
 * ```tact
 * contract Example {
 *   value: Int = 0;
 *
 *   get fun getValue(): Int {
 *     self.updateCounter(); // Suspicious: calls a function that modifies state
 *     return self.value;
 *   }
 *
 *   fun updateCounter() {
 *     self.value = self.value + 1; // Modifies state
 *   }
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * contract Example {
 *   value: Int = 0;
 *   get fun getValue(): Int {
 *     return self.value; // OK: Pure getter
 *   }
 *
 *   fun getAndIncrement(): Int {
 *     let current = self.value;
 *     self.value = self.value + 1;
 *     return current;
 *   }
 * }
 * ```
 */
export declare class StateMutationInGetter extends AstDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Checks if a getter function contains state-mutating function calls or direct mutations
     */
    private checkGetterForStateMutations;
    /**
     * Direct state mutations in statements
     */
    private checkDirectStateMutations;
    /**
     * Checks if a static function call might modify state
     */
    private checkStaticCall;
    /**
     * Checks if a method call might modify state
     */
    private checkMethodCall;
}
