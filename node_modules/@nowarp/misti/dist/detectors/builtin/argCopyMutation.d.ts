import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { AstDetector } from "../detector";
/**
 * A detector that highlights cases where function argument mutations are ineffective
 * due to [call-by-value semantics](https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_value) in Tact.
 *
 * ## Why is it bad?
 * In Tact, function arguments are passed by value, meaning that any mutations applied
 * to these arguments will only affect the local copy of the variable within the function.
 * Such mutations are unobservable outside the function, except for potentially
 * increasing gas consumption or causing exceptions.
 *
 * ## Example
 * ```tact
 * fun addEntry(m: map<Int,Int>) {
 *   m.set(1, 10); // Bad: Mutating the copy
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * fun addEntry() {
 *   self.m.set(1, 10); // OK: Changing contract's state
 * }
 * ```
 *
 * Alternatively, you could redesign the method:
 * ```tact
 * fun generateNewValue(): Int {
 *   // ... produce new value for the map
 *   return self.nextValue + 1;
 * }
 *
 * m.set(self.nextKey, self.generateNewValue()); // OK
 * ```
 */
export declare class ArgCopyMutation extends AstDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Checks if the argument is used in all return statements.
     * @param argName The name of the argument to check.
     * @param returnStatements The return statements to check.
     * @returns `true` if the argument is used in all return statements, `false` otherwise.
     */
    private usedInAllReturns;
    /**
     * Collects all return statements from the given compilation unit.
     * @param cu The compilation unit to analyze.
     * @returns A map of function names to their return statements.
     */
    private collectReturnStatements;
    /**
     * Collects mutations of function arguments within a given statement.
     * @param fun The function to analyze.
     * @returns A map of argument names to the statements where they are mutated.
     */
    private collectMutations;
    /**
     * Collects names of function argument that should be handled by this detector.
     */
    private collectInterestingArgs;
    /**
     * Identifies mutations of function arguments within a given statement.
     * @param argNames Names of function arguments to check for mutations.
     * @returns A map of argument names to the statements where they are mutated.
     */
    private findArgCopyMutations;
}
