import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { AstDetector } from "../detector";
/**
 * A detector variables and fields with unused optional modifier.
 *
 * ## Why is it bad?
 * `Optional` is a nullable value that has a special `null` value indicating the absence
 * of a value. If a developer creates an optional variable or field, he should leverage
 * its functionality by accessing the `null` value somewhere in his code. Otherwise,
 * the optional type should be removed to simplify and optimize the code.
 *
 * ## Example
 * ```tact
 * contract Test {
 *   a: Int?; // Bad: null value is never accessed
 *   init() { self.a = 42; }
 *   get fun getA(): Int { return self.a!!; }
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * contract Test {
 *   a: Int = 42; // OK: Removed optional
 *   get fun getA(): Int { return self.a; }
 * }
 * ```
 */
export declare class UnusedOptional extends AstDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    /**
     * Checks for unused optional variables in local variables of a free function.
     * @param unusedOptionalFields Optional fields which use has not been found yet.
     */
    private checkFunction;
    /**
     * Remove previously found variables which optional modifier is used.
     */
    private removeUsedOptionals;
    /**
     * Checks for unused optional variables in fields and method local variables of contracts.
     */
    private checkContract;
    /**
     * Indicates if the given expression has to return an optional, therefore if it is used as the rhs in an
     * assignment, the lhs should not be reported.
     */
    private returnsOptional;
}
