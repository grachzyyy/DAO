import { CompilationUnit } from "../../internals/ir";
import { Category, Warning, Severity } from "../../internals/warnings";
import { DataflowDetector } from "../detector";
/**
 * A detector that identifies improper use of exit codes outside the developer-allowed range.
 *
 * ## Why is it bad?
 * In the TON blockchain, exit codes are divided into specific ranges: 1 to 127
 * are reserved for the TVM or FunC, and 128 to 255 are reserved for Tact. This
 * structure leaves the range from 256 to 65535 for developers to define custom
 * exit codes.
 *
 * When exit codes are defined outside this allowed range, it may lead to
 * conflicts with existing reserved codes, causing unintended behavior or
 * errors in the contract.
 *
 * ## Example
 * ```tact
 * contract Foo {
 *     receive("foobar") {
 *         // Bad: exit code defined in the reserved range for Tact
 *         let code: Int = 128;
 *         nativeThrowUnless(code, sender() == self.owner);
 *     }
 * }
 * ```
 *
 * Use instead:
 * ```tact
 * contract Foo {
 *     receive("foobar") {
 *         // OK: using exit code from the allowed range
 *         let code: Int = 256;
 *         nativeThrowUnless(code, sender() == self.owner);
 *     }
 * }
 * ```
 *
 * ## Resources
 * 1. [Exit Codes | Tact Docs](https://docs.tact-lang.org/book/exit-codes)
 */
export declare class ExitCodeUsage extends DataflowDetector {
    severity: Severity;
    category: Category;
    check(cu: CompilationUnit): Promise<Warning[]>;
    private checkStateForWarnings;
    /**
     * Checks for invalid exit codes specified directly as numbers (e.g., throw(128))
     * @param arg The argument passed to the throw function
     * @param warnings Array to collect any warnings found
     */
    private checkDirectExitCode;
    /**
     * Checks for invalid exit codes stored in variables
     * @param arg The argument passed to the throw function
     * @param state Current state containing variable intervals
     * @param warnings Array to collect any warnings found
     */
    private checkVariableExitCode;
    private isOutsideAllowedRange;
    /**
     * Returns first argument of throw functions or null if it's not a throw call
     */
    private getThrowFunctionArg;
}
