import { ToolOutput } from "../cli/result";
import { MistiContext } from "../internals/context";
import { CompilationUnit } from "../internals/ir";
export type ToolName = string;
/**
 * A tool that can be used to extend the functionality of Misti.
 */
export declare abstract class Tool<T extends Record<string, unknown>> {
    readonly ctx: MistiContext;
    /**
     * User-defined options for the tool merged with the default options.
     */
    protected readonly options: T;
    constructor(ctx: MistiContext, config: T);
    /**
     * The unique identifier of the tool.
     */
    get id(): ToolName;
    /**
     * The default options for the tool.
     */
    abstract get defaultOptions(): T;
    /**
     * Merges the given config with the default options.
     */
    private mergeWithDefaults;
    /**
     * Runs the tool on the given compilation unit.
     * @param cu The compilation unit to run the tool on.
     * @returns The result of the tool.
     */
    run(cu: CompilationUnit): ToolOutput | never;
    /**
     * Runs the tool without any compilation unit.
     * @returns The result of the tool.
     */
    runStandalone(): ToolOutput | never;
    /**
     * Implement this method if your tool needs a compilation unit.
     * @param cu The compilation unit to run the tool on.
     */
    protected runWithCU(_: CompilationUnit): ToolOutput | never;
    /**
     * Makes a ToolOutput from the given output.
     */
    protected makeOutput(cu: CompilationUnit | undefined, output: string): ToolOutput;
    /**
     * Returns a description of the tool and its options.
     */
    abstract getDescription(): string;
    /**
     * Returns a map of option names to their descriptions.
     */
    abstract getOptionDescriptions(): Record<keyof T, string>;
    /**
     * Tests if the Tool could be executed without compilation unit using `runStandalone`.
     */
    static canRunStandalone(tool: Tool<any>): boolean;
}
/**
 * Asynchronously retrieves a built-in tool by its name.
 * If the tool is found in the BuiltInTools registry, it is loaded and returned;
 * otherwise, a warning is logged and `undefined` is returned.
 *
 * @param ctx Misti context.
 * @param name The name of the tool to retrieve. This name must match a key in the BuiltInTools object.
 * @param options The options to pass to the tool constructor.
 * @returns A Promise that resolves to a Tool instance or `undefined` if the tool cannot be found or fails to load.
 */
export declare function findBuiltInTool<T extends Record<string, unknown>>(ctx: MistiContext, name: string, options: T): Promise<Tool<T> | undefined>;
/**
 * Returns a list of all the available built-in tools.
 * @returns An array of strings representing the names of tools.
 */
export declare function getAllTools(): string[];
/**
 * @returns True if there is a built-in tool with the given name.
 */
export declare function hasBuiltInTool(name: string): boolean;
/**
 * Generates a help message for all the available tools.
 * @returns A string containing the help message.
 */
export declare function generateToolsHelpMessage(): Promise<string>;
