"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNodeFileSystem = void 0;
const exceptions_1 = require("../internals/exceptions");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
/**
 * Creates a Virtual File System backed by the local file system.
 * This file system interacts directly with the host's disk storage.
 *
 * @param root - The root directory for the virtual file system.
 * @param readonly - If true, prevents write operations. Default is true.
 * @returns A VirtualFileSystem instance with local file system operations.
 */
function createNodeFileSystem(root, readonly = true) {
    let normalizedRoot = path_1.default.normalize(root);
    if (!normalizedRoot.endsWith(path_1.default.sep)) {
        normalizedRoot += path_1.default.sep;
    }
    return {
        /**
         * The normalized root directory for the virtual file system.
         */
        root: normalizedRoot,
        /**
         * The type of the virtual file system. In this case, it is "local".
         */
        type: "local",
        /**
         * Checks if a file or directory exists at the specified path.
         *
         * @param filePath - The path to check existence for.
         * @returns True if the file or directory exists, otherwise false.
         */
        exists(filePath) {
            const resolvedPath = this.resolve(filePath);
            return fs_1.default.existsSync(resolvedPath);
        },
        /**
         * Resolves a given path to an absolute path within the virtual file system's root.
         *
         * @param filePath - One or more path segments to resolve.
         * @returns The resolved absolute path.
         */
        resolve(...filePath) {
            return path_1.default.normalize(path_1.default.resolve(normalizedRoot, ...filePath));
        },
        /**
         * Reads a file from the virtual file system.
         *
         * @param filePath - The path of the file to read.
         * @returns A Buffer containing the file's content.
         */
        readFile(filePath) {
            const resolvedPath = this.resolve(filePath);
            return fs_1.default.readFileSync(resolvedPath);
        },
        /**
         * Writes content to a file in the virtual file system.
         * Creates necessary directories if they do not exist.
         *
         * @param filePath - The path of the file to write to.
         * @param content - The content to write, as a Buffer or string.
         * @throws An exception if the file system is in readonly mode.
         */
        writeFile(filePath, content) {
            if (readonly) {
                throw exceptions_1.InternalException.make(`Cannot write to file "${filePath}": The file system is in readonly mode.`);
            }
            const resolvedPath = this.resolve(filePath);
            // Ensure the directory exists
            const dir = path_1.default.dirname(resolvedPath);
            if (!fs_1.default.existsSync(dir)) {
                fs_1.default.mkdirSync(dir, { recursive: true });
            }
            fs_1.default.writeFileSync(resolvedPath, content);
        },
        /**
         * Reads the contents of a directory in the virtual file system.
         *
         * @param dirPath - The path of the directory to read.
         * @returns An array of filenames in the directory.
         * @throws An error if the specified path is not a directory.
         */
        readdir(dirPath) {
            const resolvedPath = this.resolve(dirPath);
            if (!fs_1.default.statSync(resolvedPath).isDirectory()) {
                throw exceptions_1.InternalException.make(`Path '${resolvedPath}' is not a directory`);
            }
            return fs_1.default.readdirSync(resolvedPath);
        },
        /**
         * Retrieves the statistics of a file or directory.
         *
         * @param filePath - The path of the file or directory.
         * @returns An object containing file/directory metadata.
         */
        stat(filePath) {
            const resolvedPath = this.resolve(filePath);
            const stats = fs_1.default.statSync(resolvedPath);
            return {
                isFile: () => stats.isFile(),
                isDirectory: () => stats.isDirectory(),
                size: stats.size,
                createdAt: stats.birthtime,
                updatedAt: stats.mtime,
            };
        },
    };
}
exports.createNodeFileSystem = createNodeFileSystem;
