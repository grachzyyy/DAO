"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cliOptions = exports.cliOptionDefaults = exports.STDOUT_PATH = void 0;
const warnings_1 = require("../internals/warnings");
const createVirtualFileSystem_1 = require("../vfs/createVirtualFileSystem");
const commander_1 = require("commander");
exports.STDOUT_PATH = "-";
exports.cliOptionDefaults = {
    tools: undefined,
    outputPath: exports.STDOUT_PATH,
    listTools: false,
    outputFormat: "plain",
    colors: true,
    soufflePath: "/tmp/misti/souffle",
    souffleBinary: "souffle",
    souffleVerbose: false,
    souffle: true,
    tactStdlibPath: undefined,
    verbose: false,
    quiet: false,
    minSeverity: warnings_1.Severity.INFO,
    enabledDetectors: undefined,
    disabledDetectors: undefined,
    allDetectors: false,
    config: undefined,
    newDetector: undefined,
    listDetectors: false,
    fs: (0, createVirtualFileSystem_1.createVirtualFileSystem)("/", {}),
};
exports.cliOptions = [
    new commander_1.Option("-t, --tools <className[:key=value...]>", "Specify a tool to enable with optional configuration. Can be used multiple times.")
        .argParser((value, previous = []) => {
        const [className, ...optionParts] = value.split(":");
        const options = {};
        optionParts.forEach((part) => {
            const [key, val] = part.split("=");
            options[key] = val;
        });
        const toolConfig = { className, options };
        return previous.concat([toolConfig]);
    })
        .default(exports.cliOptionDefaults.tools),
    new commander_1.Option("--output-path <PATH>", [
        "Directory to save warnings or output generated by tools.",
        `If <PATH> is ${exports.STDOUT_PATH}, then stdout is used.`,
    ].join(" ")).default(exports.cliOptionDefaults.outputPath),
    new commander_1.Option("--list-tools", "List available tools and their options.").default(exports.cliOptionDefaults.listTools),
    new commander_1.Option("-o, --output-format <json|plain>", "Set the output format for all tools and warnings").default(exports.cliOptionDefaults.outputFormat),
    new commander_1.Option("-C, --no-colors", "Disables ANSI colors in the output.").default(exports.cliOptionDefaults.colors),
    new commander_1.Option("--souffle-binary <PATH>", "Path to the Soufflé binary.").default(exports.cliOptionDefaults.souffleBinary),
    new commander_1.Option("--souffle-path <PATH>", "Directory to save generated Soufflé files.").default(exports.cliOptionDefaults.soufflePath),
    new commander_1.Option("--souffle-verbose", "Generate human-readable, but more verbose, Soufflé files.").default(exports.cliOptionDefaults.souffleVerbose),
    new commander_1.Option("--no-souffle", "Disable Soufflé detectors.").default(exports.cliOptionDefaults.souffle),
    new commander_1.Option("--tact-stdlib-path <PATH>", "Path to the Tact standard library.").default(exports.cliOptionDefaults.tactStdlibPath),
    new commander_1.Option("-v, --verbose", "Enable verbose output.").default(exports.cliOptionDefaults.verbose),
    new commander_1.Option("-q, --quiet", "Suppress output.").default(exports.cliOptionDefaults.quiet),
    new commander_1.Option("-m, --min-severity <info|low|medium|high|critical>", "Minimum level of severity to report.")
        .default(warnings_1.Severity.INFO)
        .argParser(warnings_1.parseSeverity),
    new commander_1.Option("-de, --enabled-detectors <name|path:name>", "A comma-separated list of detectors to enable.")
        .argParser((value) => {
        const detectors = value.split(",").map((detector) => detector.trim());
        if (detectors.length === 0) {
            throw new Error("The --enabled-detectors option requires a non-empty list of detector names.");
        }
        return detectors;
    })
        .default(exports.cliOptionDefaults.enabledDetectors),
    new commander_1.Option("-dd, --disabled-detectors <names>", "A comma-separated list of names of detectors to disable.")
        .argParser((value) => {
        const detectors = value.split(",").map((detector) => detector.trim());
        if (detectors.length === 0) {
            throw new Error("The --disabled-detectors option requires a non-empty list of detector names.");
        }
        return detectors;
    })
        .default(exports.cliOptionDefaults.disabledDetectors),
    new commander_1.Option("-A, --all-detectors", "Enable all the available built-in detectors.").default(exports.cliOptionDefaults.allDetectors),
    new commander_1.Option("-c, --config <PATH>", "Path to the Misti configuration file.").default(exports.cliOptionDefaults.config),
    new commander_1.Option("--list-detectors", "List available built-in detectors.").default(exports.cliOptionDefaults.listDetectors),
];
