import { OutputFormat, ExitCode } from "../cli/types";
import { Warning } from "../internals/warnings";
type LogMap = {
    logs?: Record<string, string[]>;
};
/**
 * Result of a Misti operation that did not find any warnings.
 */
export type ResultOK = LogMap & {
    kind: "ok";
};
/**
 * Result of a Misti operation that found warnings.
 */
export type ResultWarnings = LogMap & {
    kind: "warnings";
    warnings: Warning[];
};
/**
 * Result of a Misti operation that encountered an error.
 */
export type ResultError = LogMap & {
    kind: "error";
    /**
     * Error output when Misti cannot complete the requested operation.
     */
    error: string;
};
export type ToolOutput = {
    /**
     * Name of the tool.
     */
    name: string;
    /**
     * Project this tool was executed for.
     * `undefined` if the tool doesn't require source code.
     */
    projectName: string | undefined;
    output: string;
};
/**
 * Result of a Misti operation that executed an internal tool.
 */
export type ResultTool = LogMap & {
    kind: "tool";
    output: ToolOutput[];
};
export type Result = ResultOK | ResultWarnings | ResultTool | ResultError;
/**
 * Converts a MistiResult object to a readable string based on its kind.
 */
export declare function resultToString(result: Result, outputFormat: OutputFormat): string;
export declare function resultToExitCode(result: Result): ExitCode;
export type ResultReport = {
    kind: "ok";
} | {
    kind: "error";
    message: string;
} | null;
/**
 * Saves the result of a Misti operation to files.
 *
 * The names of the files follow the following format:
 * - <project-name>.warnings.out
 * - <project-name>.<tool-name>.out
 *
 * @param result The result of a Misti operation.
 * @param outputPath The path to save the result to.
 * @returns The report of the result.
 */
export declare function saveResultToFiles(result: Result, outputPath: string): ResultReport;
export {};
