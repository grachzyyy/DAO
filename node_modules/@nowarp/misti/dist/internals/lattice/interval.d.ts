import { JoinSemilattice } from "./common";
import { Interval } from "../numbers";
import { WideningLattice } from "./widening";
/**
 * Infinite-length join semilattice lattice representing interval of numbers
 * with abstract interpretation operations over intervals.
 */
export declare class IntervalJoinSemiLattice implements JoinSemilattice<Interval>, WideningLattice<Interval> {
    static bottomValue: Interval;
    static topValue: Interval;
    constructor();
    bottom(): Interval;
    top(): Interval;
    /**
     * Joins two elements, returning the least upper bound (lub) of the two
     * intervals.
     */
    join(x: Interval, y: Interval): Interval;
    /**
     * Implements the widening operator (âˆ‡) for intervals to ensure termination
     * of fixed point computations.
     *
     * @param a First interval operand
     * @param b Second interval operand (typically the newer value)
     * @returns Widened interval that over-approximates both inputs
     */
    widen(a: Interval, b: Interval): Interval;
    private widenNum;
    leq(x: Interval, y: Interval): boolean;
}
