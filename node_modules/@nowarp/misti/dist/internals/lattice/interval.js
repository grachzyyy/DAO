"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntervalJoinSemiLattice = void 0;
const numbers_1 = require("../numbers");
/**
 * Infinite-length join semilattice lattice representing interval of numbers
 * with abstract interpretation operations over intervals.
 */
class IntervalJoinSemiLattice {
    static bottomValue = numbers_1.Interval.EMPTY;
    static topValue = numbers_1.Interval.FULL;
    constructor() { }
    bottom() {
        return IntervalJoinSemiLattice.bottomValue;
    }
    top() {
        return IntervalJoinSemiLattice.topValue;
    }
    /**
     * Joins two elements, returning the least upper bound (lub) of the two
     * intervals.
     */
    join(x, y) {
        if (x.isFull() || y.isFull()) {
            return numbers_1.Interval.FULL;
        }
        if (x.isEmpty())
            return y;
        if (y.isEmpty())
            return x;
        return new numbers_1.Interval(numbers_1.Num.min(x.low, y.low), numbers_1.Num.max(x.high, y.high));
    }
    /**
     * Implements the widening operator (âˆ‡) for intervals to ensure termination
     * of fixed point computations.
     *
     * @param a First interval operand
     * @param b Second interval operand (typically the newer value)
     * @returns Widened interval that over-approximates both inputs
     */
    widen(a, b) {
        if (a.isEmpty())
            return b;
        if (b.isEmpty())
            return a;
        if (a.isFull() || b.isFull())
            return numbers_1.Interval.FULL;
        const lower = this.widenNum(a.low, b.low, true);
        const upper = this.widenNum(a.high, b.high, false);
        return new numbers_1.Interval(lower, upper);
    }
    widenNum(a, b, isLower) {
        if (numbers_1.Num.compare(a, b) === 0n) {
            return a;
        }
        if (isLower) {
            return numbers_1.Num.compare(b, a) < 0 ? b : numbers_1.Num.m();
        }
        else {
            return numbers_1.Num.compare(b, a) > 0 ? b : numbers_1.Num.p();
        }
    }
    leq(x, y) {
        return x.leq(y);
    }
}
exports.IntervalJoinSemiLattice = IntervalJoinSemiLattice;
