"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MistiContext = void 0;
const config_1 = require("./config");
const logger_1 = require("./logger");
const cli_1 = require("../cli");
const exceptions_1 = require("./exceptions");
const child_process_1 = require("child_process");
/**
 * Represents the context for a Misti run.
 */
class MistiContext {
    logger;
    config;
    /**
     * Indicates whether a Souffle binary is available.
     */
    souffleAvailable;
    /**
     * Initializes the context for Misti, setting up configuration and appropriate logger.
     */
    constructor(options = cli_1.cliOptionDefaults) {
        this.souffleAvailable = options.souffle
            ? this.checkSouffleInstallation(options.souffleBinary)
            : false;
        try {
            this.config = new config_1.MistiConfig({
                detectors: options.enabledDetectors,
                tools: options.tools,
                allDetectors: options.allDetectors,
                configPath: options.config,
                fs: options.fs,
            });
        }
        catch (err) {
            (0, exceptions_1.throwZodError)(err, {
                msg: `Error parsing Misti Configuration${options.config ? " " + options.config : ""}`,
                help: "See: https://nowarp.io/tools/misti/docs/tutorial/configuration/",
            });
        }
        // Prioritize CLI options to configuration file values
        this.config.soufflePath = options.soufflePath;
        this.config.souffleVerbose = options.souffleVerbose;
        if (options.tactStdlibPath !== undefined) {
            this.config.tactStdlibPath = options.tactStdlibPath;
        }
        // Set logger based on verbosity options
        const saveJson = options.outputFormat === "json";
        if (config_1.MistiEnv.MISTI_TRACE) {
            this.logger = new logger_1.TraceLogger(saveJson);
        }
        else {
            this.logger = options.verbose
                ? new logger_1.DebugLogger(saveJson, true)
                : options.quiet
                    ? new logger_1.QuietLogger(saveJson)
                    : this.config.verbosity === "quiet"
                        ? new logger_1.QuietLogger(saveJson)
                        : this.config.verbosity === "debug"
                            ? new logger_1.DebugLogger(saveJson)
                            : new logger_1.Logger(undefined, saveJson);
        }
    }
    /**
     * Checks whether the Souffle binary is available.
     */
    checkSouffleInstallation(souffleBinary) {
        try {
            (0, child_process_1.execSync)(`${souffleBinary} --version`, { stdio: "ignore" });
            return true;
        }
        catch (error) {
            return false;
        }
    }
}
exports.MistiContext = MistiContext;
