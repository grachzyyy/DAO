import { AstNode } from "./tact/imports";
import { SrcInfo } from "./tact/imports";
/**
 * Represents all the errors coming from the Tact compiler API.
 */
export declare class TactException {
    private constructor();
    static make(error: unknown): Error;
    /**
     * Returns true if `stack` represents a syntax error.
     */
    static isParserError(stack: string | undefined): boolean;
    /**
     * Returns true if `stack` represents a compilation error.
     */
    static isCompilationError(stack: string | undefined): boolean;
}
/**
 * Internal error, typically caused by a bug in Misti or incorrect API usage.
 */
export declare class InternalException {
    private constructor();
    static make(msg: string, { loc, node, generateReport, }?: Partial<{
        loc: SrcInfo;
        node: unknown;
        generateReport: boolean;
    }>): Error;
}
/**
 * An error caused by incorrect actions of the user, such as wrong configuration,
 * problems in the environment, wrong CLI options.
 */
export declare class ExecutionException {
    private constructor();
    static make(msg: string, { loc, }?: Partial<{
        loc: SrcInfo;
        node: AstNode;
    }>): Error;
}
/**
 * Wraps the `try` clause adding an extra context to the exception text.
 */
export declare function tryMsg(callback: () => void, message: string): void;
/**
 * Throws an ExecutionException with a human-readable ZodError message.
 * @param err The ZodError to throw.
 */
export declare function throwZodError(err: unknown, { msg, help, }?: Partial<{
    msg: string;
    help: string;
}>): never;
