import { NumImpl } from "./num";
/**
 * Represents a numeric interval [low, high] in abstract interpretation.
 * Supports basic arithmetic operations and comparisons on intervals.
 *
 * Special cases:
 * - FULL: (-∞, +∞) represents the interval containing all numbers
 * - EMPTY: Empty interval (∅) represents an invalid or undefined interval
 *
 * @remarks
 * This class implements interval arithmetic for abstract interpretation,
 * following standard interval arithmetic rules for operations like
 * addition, multiplication, division etc.
 *
 * @throws Error when performing division by an interval containing zero
 */
export declare class Interval {
    readonly low: NumImpl;
    readonly high: NumImpl;
    constructor(low: NumImpl, high: NumImpl);
    static FULL: Interval;
    static EMPTY: Interval;
    /**
     * Creates an interval `[a, a]`.
     */
    static fromNum(a: bigint | number): Interval;
    /**
     * Creates an interval `[a, b]`.
     */
    static fromNums(a: bigint | number, b: bigint | number): Interval;
    isFull(): boolean;
    isEmpty(): boolean;
    /**
     * Checks if this interval is less than or equal to other interval.
     */
    leq(other: Interval): boolean;
    eq(other: Interval): boolean;
    plus(other: Interval): Interval;
    inv(): Interval;
    minus(other: Interval): Interval;
    times(other: Interval): Interval;
    /**
     * Abstract division.
     *
     * @returns A division result or a full interval if attempting to divide by zero.
     */
    div(other: Interval): Interval;
    containsZero(): boolean;
    equals(other: Interval): Interval;
    toString(): string;
    clone(): Interval;
}
