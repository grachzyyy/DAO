/**
 * Numbers that could include positive and negative infinity.
 *
 * We use these instead of `bigint` to distinguish infinities.
 * positive and negative infinities.
 *
 * @packageDocumentation
 */
export type NumImpl = (IntNum | PInf | MInf) & {
    toString(): string;
};
export interface IntNum {
    kind: "IntNum";
    value: bigint;
}
/**
 * Positive infinity.
 */
export interface PInf {
    kind: "PInf";
}
/**
 * Negative infinity.
 */
export interface MInf {
    kind: "MInf";
}
/**
 * Utility class for working with extended number types that include infinities.
 */
export declare class Num {
    /**
     * Creates an integer number representation.
     * @param value The numeric value to wrap
     * @returns An IntNum object
     */
    static int(value: bigint | number): NumImpl;
    /**
     * Creates a positive infinity representation.
     * @returns A PInf object
     */
    static p(): NumImpl;
    /**
     * Creates a negative infinity representation.
     * @returns An MInf object
     */
    static m(): NumImpl;
    /**
     * Adds two numbers, handling infinite values appropriately.
     * @throws {ExecutionException} When attempting to add +inf and -inf
     * @throws {InternalException} When given invalid NumImpl types
     */
    static add(a: NumImpl, b: NumImpl): NumImpl;
    /**
     * Compares two numbers, returning:
     * - negative if a < b
     * - zero if a = b
     * - positive if a > b
     */
    static compare(a: NumImpl, b: NumImpl): bigint;
    static eq: (a: NumImpl, b: NumImpl) => boolean;
    static lt: (a: NumImpl, b: NumImpl) => boolean;
    static gt: (a: NumImpl, b: NumImpl) => boolean;
    /**
     * Returns the arithmetic negation of a number.
     * @throws {Error} When given an invalid NumImpl type
     */
    static negate(n: NumImpl): NumImpl;
    static isZero(n: NumImpl): boolean;
    static divide(a: NumImpl, b: NumImpl): NumImpl;
    static multiply(a: NumImpl, b: NumImpl): NumImpl;
    /**
     * Returns the minimum of the given numbers.
     * @param nums Array of numbers to compare
     */
    static min(...nums: NumImpl[]): NumImpl;
    /**
     * Returns the maximum of the given numbers.
     * @param nums Array of numbers to compare
     */
    static max(...nums: NumImpl[]): NumImpl;
}
