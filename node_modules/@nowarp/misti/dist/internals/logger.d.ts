export declare enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3
}
type MessageType = string | Error;
export type LogFunction = (message: string) => void;
/**
 * Provides a customizable logging mechanism across different levels of verbosity.
 */
export declare class Logger {
    private saveJson;
    private logFunctions;
    private jsonLogs;
    private contextMap;
    private static asyncLocalStorage;
    private showTimestamps;
    constructor(logMapping?: Partial<Record<LogLevel, LogFunction | undefined>>, saveJson?: boolean, showTimestamps?: boolean);
    private createLogFunction;
    getJsonLogs(): Record<string, string[]>;
    /**
     * Gets the current task ID from the async context
     */
    private getCurrentTaskId;
    /**
     * Creates a new execution context and returns a function to run code within it.
     * @param contextName The name of the context to use in logs
     * @returns A function that executes the provided callback in the context
     */
    withContext<T>(contextName: string): (fn: () => Promise<T>) => Promise<T>;
    /**
     * Sets the context for a specific task ID.
     * @param taskId Unique identifier for the current task/thread
     * @param context The context string to prepend to log messages.
     */
    setContext(taskId: string, context: string): void;
    /**
     * Clears the context for a specific task ID.
     * @param taskId Unique identifier for the current task/thread
     */
    clearContext(taskId: string): void;
    /**
     * Formats the current time as [HH:MM:SS.ms]
     * @returns Formatted timestamp string
     */
    private getTimestamp;
    /**
     * Logs a message at the specified log level if a corresponding log function is defined.
     * @param level The severity level of the log entry.
     * @param msg The content of the log message.
     * @param taskId Optional task identifier to retrieve the correct context
     */
    protected log(level: LogLevel, msg: MessageType, taskId?: string): void;
    /**
     * Logs a debug message.
     * @param msg The debug message to log.
     * @param taskId Optional task identifier to retrieve the correct context
     */
    debug(msg: MessageType, taskId?: string): void;
    /**
     * Logs an info message.
     * @param msg The info message to log.
     * @param taskId Optional task identifier to retrieve the correct context
     */
    info(msg: MessageType, taskId?: string): void;
    /**
     * Logs a warning message.
     * @param msg The warning message to log.
     * @param taskId Optional task identifier to retrieve the correct context
     */
    warn(msg: MessageType, taskId?: string): void;
    /**
     * Logs an error message.
     * @param msg The error message to log.
     * @param taskId Optional task identifier to retrieve the correct context
     */
    error(msg: MessageType, taskId?: string): void;
}
/**
 * Logger that silences all logs.
 */
export declare class QuietLogger extends Logger {
    constructor(saveJson?: boolean, showTimestamps?: boolean);
}
/**
 * Logger that enables debug level logging to stdin.
 */
export declare class DebugLogger extends Logger {
    constructor(saveJson?: boolean, showTimestamps?: boolean);
}
/**
 * Logger that adds backtraces to each log function.
 */
export declare class TraceLogger extends Logger {
    constructor(saveJson?: boolean, showTimestamps?: boolean);
}
export {};
