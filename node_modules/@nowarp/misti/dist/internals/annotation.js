"use strict";
/**
 * Represents annotations in the comments processed by Misti.
 *
 * @packageDocumentation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMistiAnnotation = exports.SUPPRESS_MARKER = void 0;
/**
 * The marker used to identify Misti suppress annotations.
 * Syntax: // @misti:suppress Detector1,Detector2
 */
exports.SUPPRESS_MARKER = "@misti:suppress";
/**
 * Retrieves the Misti annotation from the current source location if present.
 *
 * These can be single or multi-line comments on the current or previous line
 * annotated with SUPPRESS_MARKER.
 *
 * @param code Code present in `SrcInfo.interval.getLineAndColumnMessage()`.
 */
function getMistiAnnotation(code) {
    const lines = code.split("\n");
    const currentLineIndex = lines.findIndex((line) => line.trim().startsWith(">"));
    if (currentLineIndex <= 0)
        return null;
    const previousLine = lines[currentLineIndex - 1];
    const previousLineCode = getCodeFromLine(previousLine);
    const annotationPattern = new RegExp(`^\\s*(\\/\\/|\\/\\*)\\s*${exports.SUPPRESS_MARKER}\\s+([\\w,]+)\\s*`);
    const match = previousLineCode.match(annotationPattern);
    if (match) {
        const detectors = match[2].split(",").map((detector) => detector.trim());
        return {
            kind: "suppress",
            detectors,
        };
    }
    return null;
}
exports.getMistiAnnotation = getMistiAnnotation;
function getCodeFromLine(line) {
    const pipeIndex = line.indexOf("|");
    if (pipeIndex !== -1) {
        return line.substring(pipeIndex + 1).trim();
    }
    else {
        return line.trim();
    }
}
