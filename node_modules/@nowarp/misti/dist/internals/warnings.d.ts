import { QuickFix } from "./quickfix";
import { SrcInfo } from "./tact/imports";
/**
 * Enumerates the levels of severity that can be assigned to detected findings.
 */
export declare enum Severity {
    INFO = 1,
    LOW = 2,
    MEDIUM = 3,
    HIGH = 4,
    CRITICAL = 5
}
/**
 * Warning category.
 */
export declare enum Category {
    /** Any possible unintended behavior leading to bugs or vulnerabilities. */
    SECURITY = 1,
    /** Code improvements for gas-optimizations. */
    OPTIMIZATION = 2,
    /** General code quality advices. */
    BEST_PRACTICES = 3
}
/**
 * Parses string input to corresponding Severity enum value.
 */
export declare function parseSeverity(value: string): Severity;
/**
 * Returns string representation of `Severity` optionally wrapped in ANSI escape
 * sequences making it colorful for visual emphasis.
 */
export declare function severityToString(s: Severity, { colorize, brackets, }?: Partial<{
    colorize: boolean;
    brackets: boolean;
}>): string;
export declare function categoryToString(c: Category): string | never;
/**
 * Base URL to detectors documentation.
 */
export declare const BASE_DOC_URL = "https://nowarp.io/tools/misti/docs/detectors";
/**
 * Source code location of the warning present in JSON output.
 */
export interface WarningLocation {
    /** Absolute path from the analyzer's process directory. */
    file: string;
    /** Line number. */
    line: number;
    /** Column number. */
    column: number;
    /** Lines of code in this location used in warning message */
    code: string;
}
/**
 * Misti warning that highlights a specific place in a Tact contract.
 */
export type Warning = {
    /** Unique identifier of the detector. */
    readonly detectorId: string;
    /** Descriptive text of the warning. */
    readonly description: string;
    /** Reference to the source code. */
    readonly location: WarningLocation;
    /** True if the warning is suppressed with a code annotation. */
    readonly suppressed: boolean;
    /** Severity of the warning. */
    readonly severity: Severity;
    /** Category of the warning. */
    readonly category: Category | undefined;
    /** More comprehensive description that clarifies the warning in greater detail. */
    readonly extraDescription: string;
    /** URL to the detector documentation. */
    readonly docURL: string;
    /** Suggested change in the source code (text description). */
    readonly suggestion: string;
    /** Optional code suggestions mainly for LSP code actions. */
    readonly quickfixes: QuickFix[];
};
/**
 * Converts SrcInfo to WarningLocation.
 */
export declare function makeWarningLocation(loc: SrcInfo): WarningLocation;
/**
 * Converts SrcInfo to the string representation shown to the user.
 */
export declare function warningLocationToString(wl: WarningLocation): string;
export declare function makeWarning(detectorId: string, description: string, severity: Severity, category: Category | undefined, loc: SrcInfo, data?: Partial<{
    extraDescription: string;
    docURL: string;
    suggestion: string;
    quickfixes: QuickFix[];
}>): Warning | never;
/**
 * A braindead-simple hash to check if the warning has already been reported.
 */
export declare function hashWarning(warn: Warning): string;
/**
 * Returns string representation of the warning according to the configuration.
 */
export declare function formatWarning(warn: Warning, colorize: boolean, addNewline: boolean): string;
/**
 * Checks whether the warning is suppressing using a Misti annotation.
 */
export declare function warningIsSuppressed(wl: WarningLocation, detectorId: string): boolean;
/**
 * Creates a link to the documentation for built-in detectors.
 */
export declare function makeDocURL(detectorName: string): string;
