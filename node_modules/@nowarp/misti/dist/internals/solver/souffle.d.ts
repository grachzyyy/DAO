import { SolverResults } from "./results";
import { Solver } from "./solver";
import { SrcInfo } from "../../internals/tact/imports";
import { MistiContext } from "../context";
import { Cfg, CompilationUnit } from "../ir";
import { SouffleContext } from "@nowarp/souffle";
/**
 * An interface for a specific dataflow problem used to generate a Soufflé program.
 *
 * It is used to express the dataflow problem and serves the same purpose as the transfer
 * function when using the worklist fixpoint algorithm. The join/meet semilattice
 * operations should be expressed implicitly in the Soufflé rules. Maintaining the
 * monotonicity property is a responsibility of the user, i.e. the designed rules
 * must ensure that the dataflow information only grows or remains the same.
 *
 * When implementing definitions inside the functions of this interface, the user can refer
 * to some fields that have special meanings and are added by the Soufflé solver by default:
 * * `bb${index}` - Basic block with the given index
 * * `edge` - Edge relations between two blocks
 */
export interface SouffleMapper {
    /**
     * Adds Souffle declarations specific for the dataflow problem.
     *
     * Example:
     * `.decl var_defined(bb: symbol, var: symbol)` - Variables defined in dataflow
     */
    addDecls(ctx: SouffleContext<SrcInfo>): void;
    /**
     * Adds Souffle rules specific for the dataflow problem.
     *
     * Example:
     * `out(bb, var) :- pred(bb, predBB), in(predBB, var).` - Computes the `out` state based on the `in` state
     */
    addRules(ctx: SouffleContext<SrcInfo>): void;
    /**
     * Adds Souffle facts to describe constraints for the dataflow problem.
     *
     * Example:
     * `var_defined("bb4", "x").` - Variable `x` is defined within the basic block with index 4
     */
    addConstraints(ctx: SouffleContext<SrcInfo>): void;
}
/**
 * Provides a framework for solving dataflow analysis problems using the Soufflé solver.
 */
export declare class SouffleSolver<State> implements Solver<State> {
    private readonly detectorId;
    private readonly ctx;
    private readonly cu;
    private readonly cfg;
    private readonly mapper;
    /**
     * @param detectorId An unique identifier of the detector using this solver.
     * @param cu Compilation unit under the analysis.
     * @param cfg CFG under the analysis.
     * @param mapper An object that defines the transfer operation for a node and its state.
     */
    constructor(detectorId: string, ctx: MistiContext, cu: CompilationUnit, cfg: Cfg, mapper: SouffleMapper);
    /**
     * Adds common declarations to represent the dataflow problem.
     * @param ctx The Souffle program where the relations are to be added.
     */
    private addDataflowDecls;
    /**
     * Adds common facts to represent the dataflow problem.
     * @param ctx The Souffle program where the relations are to be added.
     */
    private addDataflowFacts;
    /**
     * Executes the Souffle program generated within the solver.
     */
    private execute;
    /**
     * Converts the souffle execution results to the solver results as required by the class interface.
     */
    private createSouffleResults;
    solve(): SolverResults<State>;
}
