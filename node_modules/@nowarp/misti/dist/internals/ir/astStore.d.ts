import { FunctionName } from "./types";
import { AstAsmFunctionDef, AstConstantDef, AstModule, AstType, AstContract, AstContractInit, AstFieldDecl, AstFunctionDef, AstMessageDecl, AstNativeFunctionDecl, AstNode, AstPrimitiveTypeDecl, AstReceiver, AstStatement, AstStructDecl, AstTrait, SrcInfo } from "../../internals/tact/imports";
import { AstNodeId } from "../tact";
export type AstStoreFunction = AstFunctionDef | AstReceiver | AstContractInit;
/**
 * Parameters for filtering AST items.
 */
export type AstItemParams = Partial<{
    /** Include standard library items if true. */
    includeStdlib: boolean;
    /** Filter items by specific filename. */
    filename?: string;
}>;
type Filename = string;
/**
 * Provides access to AST elements using their unique IDs.
 *
 * The generated AST entries includes all the dependent elements, including imported
 * code which is included in the project AST in C/C++ style.
 */
export declare class AstStore {
    private stdlibIds;
    private contractEntries;
    private programEntries;
    private functionNames;
    private functions;
    private constants;
    private contracts;
    private nativeFunctions;
    private asmFunctions;
    private primitives;
    private structs;
    private messages;
    private traits;
    private statements;
    /**
     * Constructs a AstStore with mappings to all major AST components accessible
     * by their unique AST identifiers.
     *
     * @param stdlibIds Identifiers of AST elements defined in stdlib.
     * @param contractEntries Items defined within contracts and traits.
     * @param programEntries Identifiers of AST elements defined on the top-level of each file.
     * @param functionNames Unique names for each function definition.
     * @param functions Functions and methods including user-defined and special methods.
     * @param constants Constants defined across the compilation unit.
     * @param contracts Contracts defined within the project.
     * @param nativeFunctions Functions defined natively (not in user's source code).
     * @param asmFunctions Tact asm functions.
     * @param primitives Primitive types defined in the project.
     * @param structs Structs defined in the project.
     * @param messages Messages defined in the project.
     * @param traits Traits defined in the project.
     * @param statements All executable statements within all functions of the project.
     */
    constructor(stdlibIds: Set<number>, contractEntries: Map<number, Set<number>>, programEntries: Map<Filename, Set<AstNodeId>>, functionNames: Map<AstNodeId, FunctionName>, functions: Map<AstNodeId, AstStoreFunction>, constants: Map<AstNodeId, AstConstantDef>, contracts: Map<AstNodeId, AstContract>, nativeFunctions: Map<AstNodeId, AstNativeFunctionDecl>, asmFunctions: Map<AstNodeId, AstAsmFunctionDef>, primitives: Map<AstNodeId, AstPrimitiveTypeDecl>, structs: Map<AstNodeId, AstStructDecl>, messages: Map<AstNodeId, AstMessageDecl>, traits: Map<AstNodeId, AstTrait>, statements: Map<AstNodeId, AstStatement>);
    getFunctionName(defId: AstNodeId): FunctionName | undefined;
    /**
     * Returns top-level program entries in order as they defined in each file.
     */
    getProgramEntries({ includeStdlib, filename, }?: Partial<AstItemParams>): Exclude<AstNode, AstModule>[];
    /**
     * Returns all the items defined within the program.
     * @param items The collection of items (functions or constants).
     * @param params Additional parameters:
     * - includeStdlib: If true, includes items defined in stdlib.
     * - filename: Filters out nodes defined in the given file.
     * @returns An iterator for the items.
     */
    getItems<T extends {
        id: AstNodeId;
        loc: SrcInfo;
    }>(items: Map<AstNodeId, T>, { includeStdlib, filename }?: AstItemParams): IterableIterator<T>;
    /**
     * Returns all the functions and methods defined within the program.
     */
    getFunctions(params?: AstItemParams): IterableIterator<AstStoreFunction>;
    /**
     * Returns all the constants defined within the program, including top-level constants
     * and contract constants.
     * @param params Additional parameters:
     * - includeContract: If true, includes constants defined within a contract.
     */
    getConstants(params?: AstItemParams & {
        includeContract?: boolean;
    }): IterableIterator<AstConstantDef>;
    getContracts(params?: AstItemParams): IterableIterator<AstContract>;
    getNativeFunctions(params?: AstItemParams): IterableIterator<AstNativeFunctionDecl>;
    getAsmFunctions(params?: AstItemParams): IterableIterator<AstAsmFunctionDef>;
    getPrimitives(params?: AstItemParams): IterableIterator<AstPrimitiveTypeDecl>;
    getStructs(params?: AstItemParams): IterableIterator<AstStructDecl>;
    getMessages(params?: AstItemParams): IterableIterator<AstMessageDecl>;
    getTraits(params?: AstItemParams): IterableIterator<AstTrait>;
    /**
     * Returns all the statements defined within the program.
     */
    getStatements(): IterableIterator<AstStatement>;
    /**
     * Retrieves a function or method by its ID.
     * @param id The unique identifier of the function or method.
     * @returns The function or method if found, otherwise undefined.
     */
    getFunction(id: AstNodeId): AstStoreFunction | undefined;
    hasFunction(id: AstNodeId): boolean;
    /**
     * Retrieves a constant by its ID.
     * @param id The unique identifier of the constant.
     * @returns The constant if found, otherwise undefined.
     */
    getConstant(id: AstNodeId): AstConstantDef | undefined;
    hasConstant(id: AstNodeId): boolean;
    /**
     * Retrieves a contract by its ID.
     * @param id The unique identifier of the contract.
     * @returns The contract if found, otherwise undefined.
     */
    getContract(id: AstNodeId): AstContract | undefined;
    hasContract(id: AstNodeId): boolean;
    /**
     * Retrieves a native function by its ID.
     * @param id The unique identifier of the native function.
     * @returns The native function if found, otherwise undefined.
     */
    getNativeFunction(id: AstNodeId): AstNativeFunctionDecl | undefined;
    hasNativeFunction(id: AstNodeId): boolean;
    /**
     * Retrieves an asm function by its ID.
     * @param id The unique identifier of the asm function.
     * @returns The asm function if found, otherwise undefined.
     */
    getAsmFunction(id: AstNodeId): AstAsmFunctionDef | undefined;
    hasAsmFunction(id: AstNodeId): boolean;
    /**
     * Retrieves a primitive type by its ID.
     * @param id The unique identifier of the primitive type.
     * @returns The primitive type if found, otherwise undefined.
     */
    getPrimitive(id: AstNodeId): AstPrimitiveTypeDecl | undefined;
    hasPrimitive(id: AstNodeId): boolean;
    /**
     * Retrieves a struct by its ID.
     * @param id The unique identifier of the struct.
     * @returns The struct if found, otherwise undefined.
     */
    getStruct(id: AstNodeId): AstStructDecl | undefined;
    hasStruct(id: AstNodeId): boolean;
    /**
     * Retrieves a message by its ID.
     * @param id The unique identifier of the message.
     * @returns The message if found, otherwise undefined.
     */
    getMessage(id: AstNodeId): AstMessageDecl | undefined;
    hasMessage(id: AstNodeId): boolean;
    /**
     * Retrieves a trait by its ID.
     * @param id The unique identifier of the trait.
     * @returns The trait if found, otherwise undefined.
     */
    getTrait(id: AstNodeId): AstTrait | undefined;
    hasTrait(id: AstNodeId): boolean;
    findTrait(name: string): AstTrait | undefined;
    /**
     * Retrieves a statement by its ID.
     * @param id The unique identifier of the statement.
     * @returns The statement if found, otherwise undefined.
     */
    getStatement(id: AstNodeId): AstStatement | undefined;
    hasStatement(id: AstNodeId): boolean;
    /**
     * Retrieves the IDs of methods for a specified contract which have one of the following types: AstFunctionDef, AstReceiver, AstContractInit.
     * @param contractId The ID of the contract.
     * @returns An array of method IDs or undefined if no contract is found.
     */
    getMethods(contractId: AstNodeId): AstNodeId[] | undefined;
    /**
     * Retrieves the ID of the initialization function for a specified contract.
     * @param contractId The ID of the contract.
     * @returns The ID of the init function or undefined if the contract does not exist.
     */
    getInitId(contractId: AstNodeId): AstNodeId | undefined;
    /**
     * Retrieves the IDs of constants associated with a specified contract.
     * @param contractId The ID of the contract.
     * @returns An array of constant IDs or undefined if no contract is found.
     */
    getContractConstants(contractId: AstNodeId): AstNodeId[] | undefined;
    /**
     * Retrieves fields defined within a specified contract.
     * @param contractId The ID of the contract.
     * @returns An array of AstFieldDecl or undefined if no contract is found.
     */
    getContractFields(contractId: AstNodeId): AstFieldDecl[] | undefined;
    /**
     * Retrieves fields defined in the traits the contract inherited.
     * @param contractId The ID of the contract.
     * @returns An array of AstFieldDecl or undefined if no contract or one its trait are found.
     */
    getInheritedFields(contractId: AstNodeId): AstFieldDecl[] | undefined;
    /**
     * Retrieves items of specified kinds defined within a given file.
     * @param kinds An array of kinds to filter the items.
     * @param params Additional parameters:
     * - includeStdlib: If true, includes items defined in stdlib.
     * - filename: The filename to filter items by (required).
     * @returns An array of matching AstNode items.
     */
    getItemsByKinds(kinds: AstNode["kind"][], params: AstItemParams & {
        filename: string;
    }): Exclude<AstNode, AstModule>[];
    /**
     * Retrieves return types from the callable functions available within CompilationUnit.
     */
    getReturnTypes(): Map<FunctionName, AstType | undefined>;
    /**
     * Retrieves return types from the callable methods defined in the given contract/trait.
     * @param entryId AST identifier of the contract or trait to analyze.
     * @param withTraits Include methods from directly or indirectly inherited traits.
     */
    getMethodReturnTypes(entryId: AstNodeId, withTraits?: boolean, visited?: Set<number>): Map<FunctionName, AstType | undefined>;
    /**
     * Returns true iff `itemId` present in any of the contract/trait items.
     */
    private isContractItem;
    private isContractItemCache;
    private fileMatches;
    private filterIterator;
}
export {};
