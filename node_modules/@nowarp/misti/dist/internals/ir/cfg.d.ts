/**
 * Contains definitions of the Control Flow Graph (CFG) for Tact and utility
 * functions to work with it.
 *
 * @packageDocumentation
 */
import { AstStore } from "./astStore";
import { FunctionName } from "./types";
import { AstStatement, SrcInfo } from "../../internals/tact/imports";
import { ItemOrigin } from "../../internals/tact/imports";
import { AstNodeId } from "../tact";
export type EdgeIdx = number & {
    readonly __brand: unique symbol;
};
export type BasicBlockIdx = number & {
    readonly __brand: unique symbol;
};
export type CfgIdx = number & {
    readonly __brand: unique symbol;
};
/**
 * Represents an edge in a Control Flow Graph (CFG), connecting two basic blocks.
 * Each edge signifies a potential flow of control from one statement to another.
 *
 * @param src The index of the source block from which the control flow originates.
 * @param dst The index of the destination block to which the control flow goes.
 */
export declare class Edge {
    src: BasicBlockIdx;
    dst: BasicBlockIdx;
    idx: EdgeIdx;
    constructor(src: BasicBlockIdx, dst: BasicBlockIdx);
}
/**
 * Represents the kinds of basic blocks that can be present in a CFG.
 */
export type BasicBlockKind = 
/**
 * Represents a regular control flow node with no special control behavior.
 */
{
    kind: "regular";
}
/**
 * Represents a block that contains function calls in its expressions.
 * `callees` refers to unique indices of the callee within the CFG.
 * Functions which definitions are not available in the current
 * compilation unit are omitted.
 */
 | {
    kind: "call";
    callees: Set<CfgIdx>;
}
/**
 * Represents an exit node that effectively terminates the execution of the current control flow.
 */
 | {
    kind: "exit";
};
/**
 * Represents a basic block in a CFG, corresponding to a single
 * statement in the source code.
 * Basic blocks are connected by edges that represent the flow of control between statements.
 *
 * @param stmtID The unique identifier of the statement this block represents.
 * @param kind Kind of the basic block representing ways it behave.
 * @param srcEdges A set of indices for edges incoming to this block, representing control flows leading into this statement.
 * @param dstEdges A set of indices for edges outgoing from this block, representing potential control flows out of this statement.
 */
export declare class BasicBlock {
    stmtID: AstStatement["id"];
    kind: BasicBlockKind;
    srcEdges: Set<EdgeIdx>;
    dstEdges: Set<EdgeIdx>;
    idx: BasicBlockIdx;
    constructor(stmtID: AstStatement["id"], kind: BasicBlockKind, srcEdges?: Set<EdgeIdx>, dstEdges?: Set<EdgeIdx>);
    /**
     * Returns true iff this basic block terminates control flow.
     */
    isExit(): boolean;
}
/**
 * Kind of a function that appear in CFG.
 */
export type FunctionKind = "function" | "method" | "receive";
/**
 * Describes the intraprocedural CFG that corresponds to a function or method within the project.
 */
export declare class Cfg {
    name: FunctionName;
    id: AstNodeId;
    kind: FunctionKind;
    origin: ItemOrigin;
    nodes: BasicBlock[];
    edges: Edge[];
    ref: SrcInfo;
    /**
     * The unique identifier of this CFG among the compilation unit it belongs to.
     */
    idx: CfgIdx;
    /**
     * Map from unique basic block indices to array indices in the `this.bbs`.
     */
    private bbsMap;
    /**
     * Map from unique edge indices to array indices in the `this.edges`.
     */
    private edgesMap;
    /**
     * Creates an instance of CFG.
     * @param name The name of the function or method this CFG represents.
     * @param id AST ID.
     * @param kind Indicates whether this CFG represents a standalone function or a method or a receive method belonging to a contract.
     * @param origin Indicates whether the function was defined in users code or in standard library.
     * @param nodes Map of block indices to basic blocks in the CFG that come in the reverse order.
     * @param edges Map of edge indices to edges in the CFG that come in the reverse order.
     * @param ref AST reference that corresponds to the function definition.
     * @param idx An optional unique index. If not set, a new one will be chosen automatically.
     */
    constructor(name: FunctionName, id: AstNodeId, kind: FunctionKind, origin: ItemOrigin, nodes: BasicBlock[], edges: Edge[], ref: SrcInfo, idx?: CfgIdx | undefined);
    private initializeMapping;
    /**
     * Retrieves a basic block from the CFG based on its unique index.
     * @param idx The index of the basic block to retrieve.
     * @returns The basic block if found, otherwise undefined.
     */
    getBasicBlock(idx: BasicBlockIdx): BasicBlock | undefined;
    /**
     * Retrieves an Edge from the CFG based on its unique index.
     * @param idx The index of the edge to retrieve.
     * @returns The Edge if found, otherwise undefined.
     */
    getEdge(idx: EdgeIdx): Edge | undefined;
    private traverseBasicBlocks;
    /**
     * Returns successors for the given block.
     * @returns A list of predecessor blocks or `undefined` if any of the indices cannot be found in this CFG.
     */
    getSuccessors(bbIdx: BasicBlockIdx): BasicBlock[] | undefined;
    /**
     * Returns predecessors for the given block.
     * @returns A list of predecessor blocks or `undefined` if any of the indices cannot be found in this CFG.
     */
    getPredecessors(bbIdx: BasicBlockIdx): BasicBlock[] | undefined;
    /**
     * Iterates over all basic blocks in a CFG, applying a callback to each node.
     * The callback can perform any operation, such as analyzing or transforming the basic block.
     * @param astStore The store containing the AST nodes.
     * @param callback The function to apply to each block.
     */
    forEachBasicBlock(astStore: AstStore, callback: (stmt: AstStatement, cfgBB: BasicBlock) => void): void;
    /**
     * Iterates over all edges in a CFG, applying a callback to each edge.
     * @param callback The function to apply to each edge.
     */
    forEachEdge(callback: (cfgEdge: Edge) => void): void;
    /**
     * Returns a list of all exit nodes in the CFG.
     * @returns An array of `BasicBlock` that are exit nodes.
     */
    getExitNodes(): BasicBlock[];
}
/**
 * An utility function that extracts basic block's predecessors.
 */
export declare function getPredecessors(cfg: Cfg, bb: BasicBlock): BasicBlock[];
/**
 * An utility function that extracts basic blocks's successors.
 */
export declare function getSuccessors(cfg: Cfg, bb: BasicBlock): BasicBlock[];
