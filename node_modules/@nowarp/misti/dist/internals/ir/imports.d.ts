import { SrcInfo } from "../../internals/tact/imports";
import { ItemOrigin } from "../../internals/tact/imports";
import { VirtualFileSystem } from "../../vfs/virtualFileSystem";
export type ImportNodeIdx = number & {
    readonly __brand: unique symbol;
};
export type ImportEdgeIdx = number & {
    readonly __brand: unique symbol;
};
export type ImportLanguage = "tact" | "func";
export type ImportDirection = "forward" | "backward";
/**
 * Represents a node in the import graph, corresponding to a file.
 */
export declare class ImportNode {
    /** Displayed name. */
    name: string;
    /** Origin of the node. */
    origin: ItemOrigin;
    /** Absolute path to the imported file. */
    importPath: string;
    /** Language in which the imported file is written. */
    language: ImportLanguage;
    /** True if this file has a contract definition. */
    hasContract: boolean;
    inEdges: Set<ImportEdgeIdx>;
    outEdges: Set<ImportEdgeIdx>;
    idx: ImportNodeIdx;
    constructor(
    /** Displayed name. */
    name: string, 
    /** Origin of the node. */
    origin: ItemOrigin, 
    /** Absolute path to the imported file. */
    importPath: string, 
    /** Language in which the imported file is written. */
    language: ImportLanguage, 
    /** True if this file has a contract definition. */
    hasContract: boolean, inEdges?: Set<ImportEdgeIdx>, outEdges?: Set<ImportEdgeIdx>);
}
/**
 * Represents an edge in the import graph, connecting two files.
 */
export declare class ImportEdge {
    src: ImportNodeIdx;
    dst: ImportNodeIdx;
    /** Source location of the `import` statement. */
    loc: SrcInfo;
    idx: ImportEdgeIdx;
    constructor(src: ImportNodeIdx, dst: ImportNodeIdx, 
    /** Source location of the `import` statement. */
    loc: SrcInfo);
}
/**
 * Represents the entire import graph of a project.
 */
export declare class ImportGraph {
    nodes: ImportNode[];
    edges: ImportEdge[];
    /** Unique node index to this.nodes index mapping */
    private nodesMap;
    /** Unique edge index to this.edges index mapping */
    private edgesMap;
    constructor(nodes: ImportNode[], edges: ImportEdge[]);
    private initializeMapping;
    /**
     * Iterates over all nodes in the graph and calls the provided callback for each nodes.
     * @param callback A function to be called for each nodes in the graph.
     */
    forEachNode(callback: (node: ImportNode) => void): void;
    /**
     * Iterates over all edges in the graph and calls the provided callback for each edge.
     * @param callback A function to be called for each edge in the graph.
     */
    forEachEdge(callback: (edge: ImportEdge) => void): void;
    /**
     * Resolves project root based on the import directives.
     * The project root is a directory including all the imported files.
     *
     * @param fs The virtual file system used to manage and resolve file paths during the operation.
     * @returns Project root directory or undefined if there are no user imports.
     */
    resolveProjectRoot(fs: VirtualFileSystem): string | undefined;
    /**
     * Finds the common parent directory between two paths.
     */
    private findCommonParent;
    /**
     * Returns true if `parent` imports `child`, directly or indirectly.
     */
    imports(parent: ImportNodeIdx, child: ImportNodeIdx): boolean;
    /**
     * Returns a list of nodes that have a contract definition.
     * These nodes could be entry points of the project.
     */
    getContractNodes(): ImportNode[];
    /**
     * Performs a BFS on the import graph.
     * @param start The starting node index for the BFS.
     * @param callback A function called for each visited node and the edge through which it was reached.
     */
    bfs(start: ImportNodeIdx, callback: (node: ImportNode, edge: ImportEdge | null) => void, { direction }?: Partial<{
        direction: ImportDirection;
    }>): void;
    /**
     * Finds a node in the graph by its import path.
     * @param importPath The absolute path of the file to find.
     * @returns The ImportNode if found, or undefined if not found.
     */
    findNodeByPath(importPath: string): ImportNode | undefined;
    /**
     * Generic method to get all connections in a specified direction.
     * @param nodeIdx The index of the node to start from.
     * @param direction The direction of traversal ('forward' or 'backward').
     * @returns An array of ImportNodes connected to the given node in the specified direction.
     */
    private getConnectionsInDirection;
    /**
     * Returns all direct and indirect import connections for the given node index.
     * @param nodeIdx The index of the node to start from.
     * @returns An array of ImportNodes that are directly or indirectly imported by the given node.
     */
    getAllImportConnections(nodeIdx: ImportNodeIdx): ImportNode[];
    /**
     * Returns all nodes that directly or indirectly import the given node.
     * @param nodeIdx The index of the node to start from.
     * @returns An array of ImportNodes that directly or indirectly import the given node.
     */
    getAllImportingNodes(nodeIdx: ImportNodeIdx): ImportNode[];
    /**
     * Finds a direct connection (edge) between two nodes.
     * @param sourceIdx The index of the source node.
     * @param targetIdx The index of the target node.
     * @returns The ImportEdge if a direct connection exists, or undefined if not found.
     */
    findConnection(sourceIdx: ImportNodeIdx, targetIdx: ImportNodeIdx): ImportEdge | undefined;
}
