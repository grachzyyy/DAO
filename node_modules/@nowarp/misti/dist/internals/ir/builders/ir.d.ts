import { BasicBlock, BasicBlockIdx, BasicBlockKind, CompilationUnit, Edge, ImportGraph, ProjectName } from "..";
import { MistiContext } from "../../context";
import { AstStatement } from "../../tact/imports";
import { AstStore as TactAstStore } from "../../tact/imports";
/**
 * Represents a stateful object which is responsible for constructing the IR of a Tact project.
 *
 * It creates a one-statement-per-basic-block CFG.
 */
export declare class TactIRBuilder {
    private ctx;
    private projectName;
    private ast;
    private imports;
    /**
     * Keeps unique identifiers registered for building CFG nodes for free functions.
     */
    private functionIndexes;
    /**
     * Keeps unique identifiers registered for building CFG nodes for contract
     * and trait methods.
     */
    private methodIndexes;
    /**
     * @param projectName The name of the project being compiled and analyzed, used for referencing within the compilation environment.
     * @param ast The AST of the project.
     */
    private constructor();
    static make(ctx: MistiContext, projectName: ProjectName, ast: TactAstStore, imports: ImportGraph): TactIRBuilder;
    /**
     * Transforms an AST into a `CompilationUnit` object.
     */
    build(): CompilationUnit;
    /**
     * Assign unique CFG indices to free function definitions.
     */
    private assignFunctionIndices;
    /**
     * Creates CFGs for each free function defined in the AST using their previously registered unique identifiers.
     * @returns A map of Cfg structures keyed by their unique identifiers, representing each free function's Cfg.
     */
    private createFunctions;
    /**
     * Extracts information from the contract AST entry if it is a method.
     */
    private getMethodInfo;
    /**
     * Assign unique CFG indices to contract and trait methods.
     */
    private assignMethodIndices;
    /**
     * Creates the complete CFGs for contract and trait methods saving them to
     * Contract and Trait objects.
     */
    private createContractsAndTraits;
    /**
     * Creates an unique Cfg index for the function with the given name.
     */
    private registerCFGIdx;
    /**
     * Generates basic blocks (BB) and edges for the Cfg based on the statements within a given function or method.
     * Each BB represents a single statement, and edges represent control flow between statements.
     *
     * @param idx Unique Cfg identifier created on the function registration step.
     * @param name The name of the function or method being processed.
     * @param id AST ID.
     * @param kind Indicates whether the input represents a function or a method.
     * @param origin Indicates whether the function was defined in users code or in standard library.
     * @param statements An array of AstStatement from the AST of the function or method.
     * @param ref AST reference to the corresponding function or method.
     * @returns A Cfg instance populated with BBs and edges for the provided statements.
     */
    private createCFGFromStatements;
    /**
     * Recursively collects function and method calls from the given expression using the registered unique indexes.
     * @param expr The AST expression from which to collect function and method calls.
     * @param parentCalls A set of Cfg indexes to which the indices of found function/method calls will be added.
     * @returns A set containing Cfg indexes of function and method calls within the expression.
     */
    private collectFunctionCalls;
    /**
     * Determines kind of the basic block while creating statements.
     */
    getBBKind(stmt: AstStatement): BasicBlockKind;
    /**
     * Recursively processes an array of AST statements to generate nodes and edges for a Cfg.
     *
     * @param statements The array of AstStatement objects.
     * @param bbs An optional array of basic blocks to which new nodes will be added.
     * @param edges An optional array of Edge objects to which new edges will be added.
     * @param lastBBIdxes An optional indices representing from which control flow enters the current sequence of statements.
     * @returns A tuple containing the arrays of BasicBlock and Edge objects representing the Cfg derived from the statements.
     */
    processStatements(statements: readonly AstStatement[], bbs?: BasicBlock[], edges?: Edge[], lastBBIdxes?: BasicBlockIdx[]): [BasicBlock[], Edge[]];
    /**
     * Marks basic blocks without successors as Exit kind.
     * @param bbs The array of BasicBlock objects.
     * @param edges The array of Edge objects.
     */
    private markExitBBs;
    private getParent;
    private addEdge;
}
/**
 * Creates the Intermediate Representation (IR) for the given projects.
 *
 * @param ast AST parsed using the Tact parser.
 * @param imports An optional imports graph for the given projects, if available.
 * @returns A mapping of project names to their corresponding CompilationUnit objects.
 */
export declare function createIR(ctx: MistiContext, projectName: ProjectName, ast: TactAstStore, imports: ImportGraph): CompilationUnit;
