import { AstStore } from "..";
import { MistiContext } from "../../context";
import { AstStore as TactAstStore } from "../../tact/imports";
/**
 * Transforms AstStore to AstStore.
 */
export declare class AstStoreBuilder {
    private ctx;
    private ast;
    private programEntries;
    private stdlibIds;
    /** Items defined within contracts and traits */
    private contractEntries;
    private functionNames;
    private functions;
    private constants;
    private contracts;
    private nativeFunctions;
    private asmFunctions;
    private primitives;
    private structs;
    private messages;
    private traits;
    private statements;
    private constructor();
    static make(ctx: MistiContext, ast: TactAstStore): AstStoreBuilder;
    private processAstElements;
    private processFunctionElement;
    private processConstantElement;
    build(): AstStore;
    private processType;
    private processTrait;
    private processContract;
    private processFunction;
    private processAsmFunction;
    private processNativeFunction;
    private processStmt;
    private addContractEntry;
    /**
     * Extracts the function name based on its type and optional contract name.
     * @param func The function definition, receiver, or initializer.
     * @param contract The optional contract name.
     * @returns The function name, or `undefined` if it cannot be determined.
     */
    private extractFunctionName;
}
