import { MistiContext } from "../../context";
import { AstStore } from "../astStore";
import { CallGraph } from "../callGraph";
export declare class TactCallGraphBuilder {
    private readonly astStore;
    private nodeMap;
    private astIdToNodeId;
    private nameToNodeId;
    private edgesMap;
    private readonly logger;
    private constructor();
    static make(ctx: MistiContext, astStore: AstStore): TactCallGraphBuilder;
    /**
     * Builds the call graph using data from the AST store.
     * @returns The constructed `CallGraph`.
     */
    build(): CallGraph;
    /**
     * Adds a contract declaration (function, receiver, or initializer) to the graph.
     * @param declaration The declaration to add.
     * @param contractName The name of the contract the declaration belongs to.
     */
    private addContractDeclarationToGraph;
    /**
     * Adds a function node to the graph.
     * @param contractName The optional contract name for namespacing.
     */
    private addFunctionToGraph;
    /**
     * Extracts the function name based on its type and optional contract name.
     * @param contractName The optional contract name.
     * @returns Fully qualified function name.
     */
    private getFunctionName;
    /**
     * Analyzes the AST for function calls and adds edges between caller and callee nodes.
     * Additionally, sets flags on nodes based on their properties (e.g., if they call 'send').
     */
    private analyzeFunctionCalls;
    /**
     * Processes a single statement, identifying assignments and other statements.
     * Also detects effects and sets corresponding flags on the function node.
     * @param stmt The statement to process.
     * @param callerId The node ID of the calling function.
     * @param contractName Name of the processed contract, if applicable.
     */
    private processStatement;
    /**
     * Processes calls in expressions building the CG.
     * @param expr The expression to process.
     * @param callerId The node ID of the calling function.
     * @param currentContractName The name of the contract, if applicable.
     */
    private processExpression;
    /**
     * Finds or creates a function node in the graph by its name.
     * @param name The name of the function.
     * @returns The node ID of the existing or newly created function.
     */
    private findOrAddFunction;
    /**
     * Adds a directed edge between two nodes in the call graph.
     * @param src The source node ID.
     * @param dst The destination node ID.
     */
    private addEdge;
}
