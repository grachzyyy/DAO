import { AstStore } from "./astStore";
import { AstNodeId } from "../../";
import { Logger } from "../../internals/logger";
import { AstNode, AstModule, AstStaticCall, AstMethodCall, SrcInfo } from "../../internals/tact/imports";
export type CGNodeId = number & {
    readonly brand: unique symbol;
};
export type CGEdgeId = number & {
    readonly brand: unique symbol;
};
/** Effects flags for callgraph nodes. */
export declare enum Effect {
    /** Uses functions that send funds. */
    Send = 1,
    /** Reads contract's state. */
    StateRead = 2,
    /** Writes contract's state. */
    StateWrite = 4,
    /** Accesses datetime functions. */
    AccessDatetime = 8,
    /** Uses PRG. */
    PrgUse = 16,
    /** Inits PRG seed. */
    PrgSeedInit = 32
}
/**
 * Represents an edge in the call graph, indicating a call from one function to another.
 */
export declare class CGEdge {
    src: CGNodeId;
    dst: CGNodeId;
    idx: CGEdgeId;
    /**
     * @param src The source node ID representing the calling function
     * @param dst The destination node ID representing the called function
     */
    constructor(src: CGNodeId, dst: CGNodeId);
}
export type StateKind = "read" | "write";
/**
 * Represents a node in the call graph, corresponding to a function or method.
 */
export declare class CGNode {
    name: string;
    private logger;
    idx: CGNodeId;
    inEdges: Set<CGEdgeId>;
    outEdges: Set<CGEdgeId>;
    astId: AstNodeId | undefined;
    loc: SrcInfo | undefined;
    effects: number;
    stateAccess: Map<StateKind, Set<string>>;
    /**
     * @param node The AST node of the function. Can be `undefined` for call nodes.
     * @param name The name of the function or method
     * @param logger A logger instance for logging messages
     */
    constructor(node: Exclude<AstNode, AstModule> | undefined, name: string, logger: Logger);
    /**
     * @param fields Names of contract fields accessed or modified by the effect.
     */
    addEffect(effect: Effect, fields?: string[]): void;
    hasEffect(effect: Effect): boolean;
    hasAnyEffect(...effects: Effect[]): boolean;
    /**
     * Pretty-prints a signature of the function is available
     */
    signature(ast: AstStore): string | undefined;
}
/**
 * Represents the call graph, a directed graph where nodes represent functions or methods,
 * and edges indicate calls between them.
 */
export declare class CallGraph {
    private readonly nodeMap;
    private readonly astIdToNodeId;
    private readonly nameToNodeId;
    private readonly edgesMap;
    constructor(nodeMap: Map<CGNodeId, CGNode>, astIdToNodeId: Map<AstNodeId, CGNodeId>, nameToNodeId: Map<string, CGNodeId>, edgesMap: Map<CGEdgeId, CGEdge>);
    /**
     * Retrieves all nodes in the call graph.
     * @returns A map of all nodes by their unique IDs.
     */
    getNodes(): Map<CGNodeId, CGNode>;
    /**
     * Retrieves all edges in the call graph.
     * @returns A map of all edges by their unique IDs.
     */
    getEdges(): Map<CGEdgeId, CGEdge>;
    /**
     * Retrieves a node's ID by its name.
     * @param name The name of the function or method.
     * @returns The corresponding node ID, or `undefined` if not found.
     */
    getNodeIdByName(name: string): CGNodeId | undefined;
    /**
     * Retrieves a node's ID by the AST ID of its definition.
     * @param astId The AST ID of the function definition.
     * @returns The corresponding node ID, or `undefined` if not found.
     */
    getNodeIdByAstId(astId: AstNodeId): CGNodeId | undefined;
    /**
     * Retrieves a node by its ID.
     * @param nodeId The unique ID of the node.
     * @returns The corresponding node, or `undefined` if not found.
     */
    getNode(nodeId: CGNodeId): CGNode | undefined;
    /**
     * Determines if there exists a path from the source node to the destination node.
     * This is achieved via a breadth-first search.
     *
     * @param src The ID of the source node.
     * @param dst The ID of the destination node.
     * @returns `true` if a path exists; `false` otherwise.
     */
    areConnected(src: CGNodeId, dst: CGNodeId): boolean;
    /**
     * Derives the function call name from a static or method call expression.
     * @param expr The call expression.
     * @param currentContractName The name of the current contract, if available.
     * @returns The fully qualified function name, or `undefined` if it is irrelevant.
     */
    static getFunctionCallName(expr: AstStaticCall | AstMethodCall, currentContractName?: string): string | undefined;
}
