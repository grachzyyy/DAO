/**
 * Additional generic TypeScript functions used in the project.
 *
 * @packageDocumentation
 */
export declare const mergeSets: <T>(lhs: Set<T>, rhs: Set<T>) => Set<T>;
export declare const isSetSubsetOf: <T>(lhs: Set<T>, rhs: Set<T>, eq?: (a: T, b: T) => boolean) => boolean;
export declare const intersectSets: <T>(setA: Set<T>, setB: Set<T>) => Set<T>;
export declare const mergeLists: <T>(lhs: T[], rhs: T[]) => T[];
export declare const isListSubsetOf: <T>(lhs: T[], rhs: T[], eq?: (a: T, b: T) => boolean) => boolean;
export declare const intersectLists: <T>(l1: T[], l2: T[]) => T[];
export declare const mergeMaps: <K, V>(lhs: Map<K, V>, rhs: Map<K, V>) => Map<K, V>;
export declare const isMapSubsetOf: <K, V>(lhs: Map<K, V>, rhs: Map<K, V>, eq?: (a: V, b: V) => boolean) => boolean;
export declare const intersectMaps: <K, V>(mapA: Map<K, V>, mapB: Map<K, V>) => Map<K, V>;
/**
 * Unreachable case for exhaustive checking.
 */
export declare function unreachable(value: never): never;
/**
 * Checks if there are subdirectories present in the absolute path.
 */
export declare function hasSubdirs(filePath: string, subdirs: string[]): boolean;
/**
 * Determines if code is running in a browser environment.
 * @returns true if in browser, false otherwise
 */
export declare function isBrowser(): boolean;
/**
 * Determines if code is running from Jest test.
 * @returns true if in test environment, false otherwise
 */
export declare function isTest(): boolean;
