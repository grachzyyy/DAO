import { Config, Project } from "../../internals/tact/imports";
import { VirtualFileSystem } from "../../vfs/virtualFileSystem";
import { ProjectName } from "../ir";
/**
 * Manages the logic around the Tact configuration file.
 *
 * Tact config describes the structure of the project, and includes the entry
 * points to run compilation and analysis on.
 */
export declare class TactConfigManager {
    /**
     * An absolute path to the root directory storing the configuration file.
     *
     * If the config is generated for the Tact contract, it should be a directory containing all the imported files.
     */
    private projectRoot;
    /** Tact config parsed with Zod. */
    private config;
    private constructor();
    /**
     * Creates a TactConfigManager from a Tact configuration file typically specified by the user.
     *
     * @param ctx Misti context.
     * @param tactConfigPath Path to the Tact configuration file.
     */
    static fromConfig(tactConfigPath: string): TactConfigManager;
    /**
     * Creates a TactConfigManager from a single Tact contract.
     *
     * @param ctx Misti context.
     * @param projectName Name of the project.
     * @param contractPath Path to the Tact contract.
     * @param vfs Virtual file system to manage interactions with the project files.
     */
    static fromContract(projectRoot: string, contractPath: string, projectName: ProjectName | undefined, vfs: VirtualFileSystem): TactConfigManager;
    getConfig(): Config;
    /**
     * Returns absolute path to the project root.
     */
    getProjectRoot(): string;
    /**
     * Gets projects defined within the configuration file.
     */
    getProjects(): readonly Project[];
    /**
     * Find the project config based on the provided name.
     */
    findProjectByName(projectName: ProjectName): Project | undefined;
    /**
     * Find the project config based on the provided path.
     */
    findProjectByPath(projectPath: string): Project | undefined;
    /**
     * Returns an absolute path or the project based on the project path.
     */
    resolveProjectPath(projectPath: string): string;
    /**
     * Reads the Tact configuration file from the specified path, parses it, and returns
     * the Config object.
     * @throws If the config file does not exist or cannot be parsed.
     * @returns The parsed Config object.
     */
    private static readConfig;
    /**
     * Returns absolute paths to entry points specified in the Tact configuration file.
     */
    getEntryPoints(): string[];
}
