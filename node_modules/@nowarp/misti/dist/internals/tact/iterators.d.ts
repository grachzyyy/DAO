import { AstExpression, AstNode, AstStatement } from "../../internals/tact/imports";
export declare function extractPath(path: AstExpression): string;
/**
 * Recursively iterates over each expression in an ASTNode and applies a callback to each expression.
 * @param node The node to traverse.
 * @param callback The callback function to apply to each expression.
 * @param flatStmts If true, only traverse statement expressions at the current
 *                  level without going into nested statements.
 */
export declare function forEachExpression(node: AstNode, callback: (expr: AstExpression) => void, { flatStmts }?: Partial<{
    flatStmts: boolean;
}>): void;
/**
 * Recursively searches for an expression in an ASTNode that satisfies the predicate.
 * @param node The node to traverse.
 * @param predicate The predicate function to test each expression.
 * @returns The first expression that satisfies the predicate, or null if none found.
 */
export declare function findInExpressions(node: AstNode, predicate: (expr: AstExpression) => boolean): AstExpression | null;
/**
 * Returns true if there are any nested expressions matching the given predicate.
 * @param node The node to traverse.
 * @param predicate The predicate function to test each expression.
 * @returns The first expression that satisfies the predicate, or null if none found.
 */
export declare function hasInExpressions(node: AstNode, predicate: (expr: AstExpression) => boolean): boolean;
/**
 * Recursively iterates over each expression in an ASTNode and applies a callback to each expression.
 * @param node The node to traverse.
 * @param acc The initial value of the accumulator.
 * @param callback The callback function to apply to each expression.
 * @returns The final value of the accumulator after processing all expressions.
 */
export declare function foldExpressions<T>(node: AstNode, callback: (acc: T, expr: AstExpression) => T, acc: T): T;
/**
 * Recursively iterates over each statement in an ASTNode and applies a callback to each statement.
 * @param node The node to traverse.
 * @param callback The callback function to apply to each statement.
 */
export declare function forEachStatement(node: AstNode, callback: (stmt: AstStatement) => void): void;
/**
 * Recursively iterates over each statement in an ASTNode and applies a callback to each statement.
 * @param node The node to traverse.
 * @param acc The initial value of the accumulator.
 * @param callback The callback function to apply to each statement, also passes the accumulator.
 * @param flatStmts If true, only traverse statements at the current level without
 *                  going into nested statements.
 * @returns The final value of the accumulator after processing all statements.
 */
export declare function foldStatements<T>(node: AstNode, callback: (acc: T, stmt: AstStatement) => T, acc: T, { flatStmts }?: Partial<{
    flatStmts: boolean;
}>): T;
