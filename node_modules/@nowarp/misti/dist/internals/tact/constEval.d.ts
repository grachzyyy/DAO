import { AstExpression, AstLiteral } from "../../internals/tact/imports";
/**
 * Supported literal kinds:
 * https://github.com/tact-lang/tact/blob/0a6c6880144642105948e0b8361cf3f54cdec001/src/optimizer/interpreter.ts#L99
 */
export type LiteralKind = "address" | "boolean" | "cell" | "null" | "number" | "simplified_string" | "slice" | "struct_value";
/**
 * Evaluates a constant expression and returns its value.
 *
 * @param expr The AST expression to evaluate.
 * @returns The evaluated constant value, or undefined if evaluation fails.
 */
export declare function evalExpr(expr: AstExpression): AstLiteral | undefined;
/**
 * Evaluates the given expression to a constant value and checks if it matches
 * the expected type.
 *
 * @param expr The expression to evaluate.
 * @param expectedKind The expected kind of the result.
 * @returns The evaluated value if it matches the expected type, undefined otherwise.
 */
export declare function evalToType(expr: AstExpression, expectedKind: LiteralKind): AstLiteral | undefined;
/**
 * Evaluates the given expression to a literal and checks if it matches
 * the expected type and value.
 *
 * @param expr The expression to evaluate.
 * @param expectedKind The expected kind of the result.
 * @param expected The expected result.
 * @returns True if the expression can be evaluated to a constant value that
 *          matches the expected type and value, false otherwise.
 */
export declare function evalsToLiteral(expr: AstExpression, expected: AstLiteral): boolean;
/**
 * Evaluates the given expression to a constant value and checks if it satisfies the predicate.
 *
 * @param expr The expression to evaluate.
 * @param predicate The predicate to check.
 * @returns True if the expression can be evaluated to a constant value that satisfies
 *          the predicate, false otherwise.
 */
export declare function evalsToPredicate(expr: AstExpression, predicate: (lit: any) => boolean): boolean;
/**
 * Wraps an OOP API into into something a sane developer might actually want to use.
 */
export declare class MakeLiteral {
    static boolean(value: boolean): import("@tact-lang/compiler").AstBoolean;
    static number(value: bigint): import("@tact-lang/compiler/dist/ast/ast").AstNumber;
}
